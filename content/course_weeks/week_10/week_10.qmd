---
title: "10 - Difference-in-Differences (2/2)"
linktitle: "10 - Difference-in-Differences (2/2)"
output:
  blogdown::html_page:
    toc: true
menu:
  example:
    parent: Course content
    weight: 1
type: docs
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.width = 6, fig.asp = 0.618, fig.align = "center", fig.retina = 3, out.width = "75%")
set.seed(11)
options("digits" = 2, "width" = 150)
options(dplyr.summarise.inform = FALSE)

# custom ggplot theme
# colors from TUHH brand identity
tuhh_colors <- c("#D0D0CE", "#00C1D4", "#FF4F4F", "#5AFFC5",
                 "#FFDE36", "#143BFF", "#FF7E15", "#FFAEA2")

# initialise theme
cds_theme <- ggthemr::define_palette(
  swatch = tuhh_colors,
  gradient = c(lower = "#FFAEA2", upper = "#00C1D4"),
  background = "#0F2231",
  line = c("#FFFFFF", "#FFFFFF"),
  text = c("#FFFFFF", "#FFFFFF"),
  gridline = c(ggplot2::alpha("#D0D0CE", 0.2), 
               ggplot2::alpha("#D0D0CE", 0.4))
)

# set theme
ggthemr::ggthemr(cds_theme, type = "outer")

# source custom DAG theme
source(paste0(here::here(), "/code/dag_theme.R"))
```

## Slides & Recap

<iframe style="width: 100%; height: 45vw; max-height: 50vh;" frameborder="0" allowfullscreen src="https://tuhhstartupengineers-classroom.github.io/ss24-causal-data-science/slides/08_did.html">

</iframe>

This week, we will revisit the difference-in-differences framework and build upon it. Last week, our focus was on two groups: a treatment group and a control group. However, in real-world applications, you often encounter situations where units are treated at different times, resulting in multiple groups or cohorts. A substantial and recent body of literature has examined the so-called "staggered treatment adoption" and demonstrated that the standard estimator we used last week (two-way fixed effects, TWFE) is biased unless we account for treatment effect heterogeneity. Additionally, we must still adhere to the other assumptions relevant to the basic case, particularly parallel trends and no anticipation.

Consequently, when we observe units $i$ across time periods $t = 1,...,T_t$ and units adopt the binary treatment at different dates $G_i \in (1, ..., T_t) \cup \infty$, we can extend parallel trends assumption by:

::: {.callout-note icon="false"}
## Assumption (A.stpt) "Parallel Trends"

$\mathbb{E}[Y_{i,t}(\infty) - Y_{i,t-1}(\infty) | G_i=g] = \mathbb{E}[Y_{i,t-1}(\infty) - Y_{i,t}(\infty) | G_i=g'] \quad \forall g, g', t$.
:::

Put differently, in absence of treatment, the average outcomes by cohort would be parallel. The interpretation of the parallel trends assumption does not change, the treatment must not have any effect on the cohort before being administered.

::: {.callout-note icon="false"}
## Assumption (A.stna) "No Anticipation"

$\mathbb{E}[Y_{i,t}(g) - Y_{i,t}(\infty) | T_i=1] = 0 \quad$ or $\quad Y_{i,t}(g) = Y_{i,t}(\infty) \quad \forall t < g$
:::


## Practical example

Imagine you are working as an analyst for a streaming company. Over several weeks, you have introduced unskippable ads to boost ad revenue. However, you suspect that this change may have caused some customers to watch less content. Your task is to [take the data](https://cloud.tuhh.de/index.php/s/QtxmReNk3ePwS5t) and measure the impact of unskippable ads on customer viewing behavior.

```{r}
#| message: false
#| warning: false

# Load tidyverse
library(tidyverse)

# Read data
stream <- readRDS("stream.rds")

# Print first lines
print(stream |> head(10))
```


### Data overview

This week, we'll tackle a more realistic scenario compared to previous weeks. Instead of having all the details about your data upfront, you'll be given the data and will need to uncover the details as you go.

[**Task 1:**]{style="color:#FF7E15"} Answer the following questions:

- How many periods did we observe?
- How many units did we observe?
- How many cohorts/treatment groups are in the data?
- How many units are in each cohort?
- How many treated, not-yet treated and untreated/never treated periods did we observe?

```{r}
#| code-fold: false

# Task 1: Answer the following questions:
# - How many periods?
unique(stream$time)
# - How many units?
unique(stream$unit)
# - How many cohorts/treatment groups?
unique(stream$group)
# - How many units in each cohort?
stream |> group_by(group) |> summarise(n_unit = n_distinct(unit)) |> ungroup()
# - How many treated, not-yet treated and untreated/never treated periods
# do we observe?
# First add treatment and relative treatment indicator
stream <- stream |> 
  # create time-variant treatment indicator D_it
  mutate(d_it = case_when(
    group == 0 ~ 0,
    time >= group ~ 1,
    .default = 0)) |>
  # create relative event-time indicator D_it_k
  mutate(d_it_k = case_when(
    group == 0 ~ Inf,
    .default = time - group))
```


```{r}
#| code-fold: false

# Then group by treatment indicator to retrieve information
units_d <- stream |> group_by(group, d_it) |> summarise(n_unit = n_distinct(unit)) |> ungroup()
print(units_d)
```


```{r}
#| code-fold: false

units_k <- stream |> group_by(group, d_it_k) |> summarise(n_unit = n_distinct(unit)) |> ungroup()
print(units_k)
```

[**Task 2:**]{style="color:#FF7E15"} Compute and plot the outcome for each cohort (treatment groups + control groups)

- before and after the treatment,
- and for each period.

```{r}
#| code-fold: false
#| warning: false

# Task 2: compute plot evolution of average outcomes across cohorts.
# (a) 
stream |>
    group_by(group, d_it) |> 
    summarise(mean_y = mean(minutes_watched)) |> 
    ungroup()

# (b)
Y_gt_k <- stream |>
  group_by(group, time) |> 
  summarise(mean_y = mean(minutes_watched)) |> 
  ungroup() |> 
  mutate(group = if_else(group == 0, NA, group))
Y_gt_k

# One plot
ggplot(Y_gt_k, aes(
  x = time, 
  y = mean_y,
  color = as.factor(group))) + 
  geom_line() + 
  geom_point() +
  xlab("Week") + 
  ylab("Minutes watched") +
  geom_vline(aes(xintercept = group - .5, color = as.factor(group)), linetype = "dotted")

# Facet plot
ggplot(Y_gt_k, aes(
  x = time, 
  y = mean_y)) + 
  geom_point() +
  geom_line() +
  geom_vline(aes(xintercept = group - .5), linetype = "dotted", colour = "red") +
  xlab("Week") + 
  ylab("Minutes watched") +
  facet_wrap(~group)

```

### Event Study

Let's run an event study to assess the plausibility of our assumption of parallel trends and no anticipation.

[**Task 3:**]{style="color:#FF7E15"} Without including covariates, run an event study and assess whether the assumption of parallel trends holds.

```{r}
#| code-fold: false

# Task 3: Run an event-study without covariates to assess the parallel trends
# assumption.
evt_stdy_wo <- fixest::feols(minutes_watched ~ i(d_it_k, ref = c(-1, Inf)) | unit + time, data = stream)
summary(evt_stdy_wo)
fixest::iplot(evt_stdy_wo)
```

[**Task 4:**]{style="color:#FF7E15"} Including covariates, run an event study and assess whether the assumption of parallel trends holds.

```{r}
#| code-fold: false

# Task 4: Run an event-study with covariates to assess the conditional parallel trends
# assumption.
evt_stdy_w <- fixest::feols(minutes_watched ~ i(d_it_k, ref = c(-1, Inf)) +
                              age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched
                            | unit + time, data = stream)
summary(evt_stdy_w)
fixest::iplot(evt_stdy_w)
```

[**Task 5:**]{style="color:#FF7E15"} Compute the static treatment effect using TWFE (w and w/o).

```{r}
#| code-fold: false

# Task 6: Compute the static treatment effect using TWFE (w and w/o).
twfe_wo <- fixest::feols(minutes_watched ~ i(d_it, ref = c(0)) | unit + time, data = stream)
twfe_w <- fixest::feols(minutes_watched ~ i(d_it, ref = c(0)) 
                        + age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched
                        | unit + time, data = stream)

summary(twfe_wo)
summary(twfe_w)
```

### Robust estimators

As discussed in the lecture, when treatment adoption is staggered, the two-way fixed effects estimator yields biased results in the presence of treatment effect heterogeneity, i.e., when the treatment effect changes over time. This occurs because some comparisons that should be excluded are still executed by TWFE. Andrew Goodman-Bacon was the first to notice and explain this issue. He decomposed the treatment effect into all possible 2x2 comparisons, showing which comparisons are valid and which are not when we cannot assume treatment effect homogeneity over time. The R package `bacondecomp` helps visualize these comparisons. Let's use it to examine our case.

```{r}
# Bacon-Decomposition
library(bacondecomp)

# What comparisons are included in TWFE?
df_bacon <- bacon(
  minutes_watched ~ d_it + 
    age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched,
  data = stream,
  id_var = "unit",
  time_var = "time")

# Plot comparisons
ggplot(df_bacon$two_by_twos) +
  aes(x = weight, y = estimate, shape = factor(type), color = factor(type)) +
  geom_point(size = 3) +
  geom_hline(yintercept = 0, color = "black", linetype = "dotted") + 
  theme_minimal() +
  labs(x = "Weight", y = "Estimate", shape = "Type", color = "Type") + 
  theme(legend.position = "bottom")

```

[**Task 6:**]{style="color:#FF7E15"} Use any method that is robust to treatment effect heterogeneity for staggered treatment adoption. Retrieve a static and a dynamic estimate and plot your result. Using the result from the Bacon-Decomposition, compare the estimate to the TWFE estimate.

#### Callaway & Santâ€™Anna (2021)

```{r}
#| code-fold: false

# (b) Doubly robust
drdid <- did::att_gt(
  yname = "minutes_watched",
  tname = "time",
  idname = "unit",
  gname = "group",
  xformla = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched,# + unit, #  ~ 1 
  data = stream,
  allow_unbalanced_panel = TRUE,
  control_group = "nevertreated", # "notyettreated"
  anticipation = 0,
  clustervars = "unit",
  est_method = "dr", # "reg", "ipw"
)
did::aggte(drdid, type="simple")
drdid_evt_sty <- did::aggte(drdid, type="dynamic")
did::ggdid(drdid_evt_sty)
```

#### Gardner, Thakral, TÃ´, and Yap (2024)

```{r}
#| code-fold: false

# (c) Two-Stage DiD
# Static model
twsdid <- did2s::did2s(
  stream,
  yname = "minutes_watched",
  first_stage = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched | unit + time, # only time-variant covariates
  second_stage = ~ i(d_it, ref = 0),
  treatment = "d_it",
  cluster_var = "unit"
)

twsdid
```


```{r}
#| code-fold: false

# Event Study
twsdid_k <- did2s::did2s(
  stream,
  yname = "minutes_watched",
  first_stage = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched | unit + time, # only time-variant covariates
  second_stage = ~ i(d_it_k, ref = c(-1, Inf)),
  treatment = "d_it",
  cluster_var = "unit"
)

fixest::iplot(twsdid_k)
```

#### Comparison

```{r}
#| code-fold: false

estimators_comparison <- tibble(
  "TWFE" = twfe_w$coeftable$Estimate[1],
  "Callaway & Santâ€™Anna" = did::aggte(drdid, type="simple")[[1]],
  "Gardner, Thakral, TÃ´, and Yap" = twsdid$coeftable[[1]]
)   

print(estimators_comparison)
```


## Assignment

Accept the [Week 10 - Assignment](https://classroom.github.com/a/AUAr8zj4) and follow the same steps as last week and as described in the organization chapter.

Please also remember to fill out the [course evaluation](https://evaluating.tuhh.de/evasys/online.php?pswd=597RW) if you have not done so already.

::: assignment

1. Explain in your own words in 3-4 sentences, when and why the estimation of treatment effects using TWFE yields biased estimate in the case of staggered adoption and multiple treatment periods.

2. One week prior to introducing the unskippable ads, you notify your users in an email. Explain, how that could affect your estimation and the assumption it relies on. Independent of your conclusion, show how you can account for anticipation when using the estimator from the `did2s` package (Gardner, Thakral, TÃ´, and Yap (2024)).

3. Using the robust estimator from the `did` package (Callaway & Santâ€™Anna (2021)), perform a sensitivity analysis using the [`HonestDiD`](https://github.com/asheshrambachan/HonestDiD) package. Additional to the lecture slides, you can find instructions on installation, functionality, and theory on [GitHub](https://github.com/asheshrambachan/HonestDiD). Run the sensitivity analysis based on "bounds on relative magnitudes" and explain the result in your own words (3-4 sentences). Please note that you have to set `base_period = "universal"` in `att_gt()`.

:::
