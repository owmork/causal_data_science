task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.lm", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.ranger", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.lm", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.ranger", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.ranger", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.ranger", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.ranger", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.ranger", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.ranger", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.log_reg", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.ranger", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.log_reg", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.ranger", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.xgboost", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.ranger", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.xgboost", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.ranger", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.xgboost", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.ranger", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.xgboost", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.xgboost", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.xgboost", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.xgboost", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.xgboost", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.xgboost", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# Define prediction model for the propensity score e
task_e <- as_task_classif(df_pred |> select(-downloads_diff), target = "ever_treated")
lrnr_e <- lrn("classif.xgboost", predict_type = "prob")
# Define prediction model for the outcome difference delta_mu
task_mu <- as_task_regr(df_pred |> select(-ever_treated), target = "downloads_diff")
lrnr_mu <- lrn("regr.xgboost", predict_type = "response")
# mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
# mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
# ehat_sampled <- sample(ehat, replace = TRUE)
# mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
####
n <- length(Y1)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
ehat <- rep(NA, n)
delta_mu <- rep(NA, n)
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# Learn propensity score e among all observations
lrnr_e$train(task_e, row_ids = which(fold != i))
# Predict propensity score ehat
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# learn outcome difference delta_mu among untreated
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df_2p_piv$ever_treated == 0)))
# predict outcome difference delta_mu among all observations
delta_mu[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
# Calculate the ATT
D <- df_2p_piv$ever_treated
P <- mean(df_2p_piv$ever_treated)
Y1 <- df_2p_piv$month_9
Y0 <- df_2p_piv$month_8
mean( ((Y1-Y0) - delta_mu) * (D - ehat)/(P*(1-ehat)) )
mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
mean( ((Y1-Y0) - sample(delta_mu, replace = FALSE)) * (D - ehat)/(P*(1-ehat)) )
ehat_sampled <- sample(ehat, replace = TRUE)
mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
ehat_sampled <- sample(ehat, replace = TRUE)
mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
ehat_sampled <- sample(ehat, replace = TRUE)
mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
ehat_sampled <- sample(ehat, replace = TRUE)
mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
ehat_sampled <- sample(ehat, replace = TRUE)
mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
ehat_sampled <- sample(ehat, replace = TRUE)
mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
ehat_sampled <- sample(ehat, replace = TRUE)
mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
ehat_sampled <- sample(ehat, replace = TRUE)
mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
ehat_sampled <- sample(ehat, replace = TRUE)
mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
ehat_sampled <- sample(ehat, replace = TRUE)
mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
ehat_sampled <- sample(ehat, replace = FALSE)
mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
ehat_sampled <- sample(ehat, replace = FALSE)
mean( ((Y1-Y0) - delta_mu) * (D - ehat_sampled)/(P*(1-ehat_sampled)) )
mean( ((Y1-Y0) - delta_mu) * (D - sample(ehat, replace = FALSE))/(P*(1-sample(ehat, replace = FALSE))) )
mean( ((Y1-Y0) - delta_mu) * (D - sample(ehat, replace = FALSE))/(P*(1-sample(ehat, replace = FALSE))) )
mean( ((Y1-Y0) - delta_mu) * (D - sample(ehat, replace = FALSE))/(P*(1-sample(ehat, replace = FALSE))) )
mean( ((Y1-Y0) - delta_mu) * (D - sample(ehat, replace = FALSE))/(P*(1-sample(ehat, replace = FALSE))) )
mean( ((Y1-Y0) - delta_mu) * (D - sample(ehat, replace = FALSE))/(P*(1-sample(ehat, replace = FALSE))) )
mean( ((Y1-Y0) - delta_mu) * (D - sample(ehat, replace = FALSE))/(P*(1-sample(ehat, replace = FALSE))) )
mean( ((Y1-Y0) - delta_mu) * (D - sample(ehat, replace = FALSE))/(P*(1-sample(ehat, replace = FALSE))) )
mean( ((Y1-Y0) - delta_mu) * (D - sample(ehat, replace = FALSE))/(P*(1-sample(ehat, replace = FALSE))) )
mean( ((Y1-Y0) - delta_mu) * (D - sample(ehat, replace = FALSE))/(P*(1-sample(ehat, replace = FALSE))) )
mean( ((Y1-Y0) - delta_mu) * (D - sample(ehat, replace = FALSE))/(P*(1-sample(ehat, replace = FALSE))) )
mean( ((Y1-Y0) - delta_mu) * (D - sample(ehat, replace = FALSE))/(P*(1-sample(ehat, replace = FALSE))) )
mean( ((Y1-Y0) - delta_mu) * (D - sample(ehat, replace = FALSE))/(P*(1-sample(ehat, replace = FALSE))) )
