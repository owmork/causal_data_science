w
objective <- Minimize(sum_squares(X_v %*% w - y1_pre))
constraints <- list(sum(w) == 1, w >= 0)
constraints
problem <- Problem(objective, constraints)
solve(problem)
w_star
solve(problem)$getValue(w)
get_weights <- function(X, y) {
# Initialize weights
w <- Variable(ncol(X))
# Objective: minimize sum of squares (reproduce y)
objective <- Minimize(sum_squares(X %*% w - y))
# Subject to constraints
constraints <- list(sum(w) == 1, w >= 0)
# Define problem
problem <- Problem(objective, constraints)
# Solve and get weights
w_star <- as.vector(solve(problem)$getValue(w))
return(w_star)
}
# Minimization subject to constraints
get_weights <- function(X, y) {
# Initialize weights
w <- Variable(ncol(X))
# Objective: minimize sum of squares (reproduce y)
objective <- Minimize(sum_squares(X %*% w - y))
# Subject to constraints
constraints <- list(sum(w) == 1, w >= 0)
# Define problem
problem <- Problem(objective, constraints)
# Solve and get weights
w_star <- as.vector(solve(problem)$getValue(w))
return(w_star)
}
get_weights(X_v, y1_pre)
round(w_star, 2)
# custom weights
V <- c(1, 1)
X_v <- V[1] * y0_pre + V[2] * x0_pre
w_star <- get_weights(X_v, y1_pre)
round(w_star, 2)
X_v <- V[1] * y0_pre + V[2] * x0_pre
w_star <- get_weights(X_v, y1_pre)
round(w_star, 2)
# custom weights
V <- c(1, 1)
X_v <- V[1] * y0_pre + V[2] * x0_pre
w_star <- get_weights(X_v, y1_pre)
round(w_star, 2)
plot_synth(w_star)
ride[ride$post == 0, ]$period)
n_distinvt(ride[ride$post == 0, ]$period)
n_distinct(ride[ride$post == 0, ]$period)
# Exploration
# How many pre- and post periods?
T_pre <- n_distinct(ride[ride$post == 0, ]$period)
T_post <- n_distinct(ride[ride$post == 1, ]$period)
T_post
# Revenue over time
ggplot(
ride,
aes(
x = period,
y = revenue,
group = city,
color = factor(treated),
linewidth = factor(treated)
)) +
geom_line(aes(alpha = factor(treated))) +
geom_vline(xintercept = T0, linetype = "dashed") +
scale_alpha_manual(values = c(.25, 1)) +
scale_linewidth_manual(values = c(.5, .8)) +
labs(color = "Treatment group", alpha = "Treatment group", linewidth = "Treatment group")
# Revenue over time
ggplot(
ride,
aes(
x = period,
y = revenue,
group = city,
color = factor(treated),
linewidth = factor(treated)
)) +
geom_line(aes(alpha = factor(treated))) +
geom_vline(xintercept = T0, linetype = "dashed") +
scale_alpha_manual(values = c(.35, 1)) +
scale_linewidth_manual(values = c(.5, .8)) +
labs(color = "Treatment group", alpha = "Treatment group", linewidth = "Treatment group")
# Treatment group comparison
ride |>
group_by(treated) |>
summarise(
mean(density),
mean(employment),
mean(gdp),
mean(population),
mean(revenue)
)
ride |>
group_by(treated) |>
summarise(across(c("density", "employment", "gdp", "population", "revenue"), mean))
# Treatment group comparison
ride |>
group_by(treated) |>
summarise(across(c("density", "employment", "gdp", "population", "revenue"), mean))
# Treatment group comparison
ride |>
group_by(treated) |>
summarise(across(c("density", "employment", "gdp", "population", "revenue"), mean)) |>
ungroup()
ride |>
filter(post == 0, treated == 0) |>
select(revenue, city, period) |>
pivot_wider(id_cols = "period", names_from = "city", values_from = "revenue") |>
select(-period) |>
as.matrix()
ride |>
filter(post == 0, treated == 0) |>
#select(revenue, city, period) |>
pivot_wider(id_cols = "period", names_from = "city", values_from = "revenue") |>
select(-period) |>
as.matrix()
# counterfactual
y1_synth <- y0_post %*% w_ols
# ATT
mean(y1_post - y1_synth)
# Counterfactual / Synthetic control unit
y1_synth <- y0_pre %*% w_ols
# ATT
mean(y1_pre - y1_synth)
y1_synth
y1_pre
# Counterfactual / Synthetic control unit
y_synth_post <- y0_post %*% w_ols
# ATT
mean(y1_post - y_synth_post)
# Counterfactual / Synthetic control unit
y_synth_pre <- y0_pre %*% w_ols
# Pseudo-ATT
mean(y1_pre - y_synth_pre)
# Create data frame with synthetic control and treated unit
sc_vs_trt <- tibble(
period = unique(ride$period),
y_synth = c(y_synth_pre, y_synth_post),
y_treat = c(y1_pre, y1_post)
) |>
pivot_longer(cols = c("y_synth", "y_treat"))
# Line plot with treatment date highlighted
ggplot(sc_vs_trt, aes(x = period, y = value, group = name, color = name)) +
geom_line() +
geom_vline(xintercept = T0, linetype = "dashed")
a_uni
y0_pre
a_uni * y1_pre
length(a_uni)
length(y1_pre)
length(y0_pre)
N0
library(tidyverse)
ride <- readRDS("content/course_weeks/week_11/ride.rds")
print(head(df))
# Exploration
# How many pre- and post periods?
T_pre <- n_distinct(ride[ride$post == 0, ]$period)
T_post <- n_distinct(ride[ride$post == 1, ]$period)
# How many units?
N1 <- n_distinct(ride[ride$treated == 1, ]$city)
N0 <- n_distinct(ride[ride$treated == 0, ]$city)
# What is first treatment period?
T0 <- min(ride[ride$post == 1, ]$period)
# Revenue over time
ggplot(
ride,
aes(
x = period,
y = revenue,
group = city,
color = factor(treated),
linewidth = factor(treated)
)) +
geom_line(aes(alpha = factor(treated))) +
geom_vline(xintercept = T0, linetype = "dashed") +
scale_alpha_manual(values = c(.35, 1)) +
scale_linewidth_manual(values = c(.5, .8)) +
labs(color = "Treatment group", alpha = "Treatment group", linewidth = "Treatment group")
# Treatment group comparison
ride |>
group_by(treated) |>
summarise(across(c("density", "employment", "gdp", "population", "revenue"), mean)) |>
ungroup()
# Split and extract 4 matrices
y0_pre <- ride |>
filter(post == 0, treated == 0) |>
pivot_wider(id_cols = "period", names_from = "city", values_from = "revenue") |>
select(-period) |>
as.matrix()
y1_pre <- ride |>
filter(post == 0, treated == 1) |>
pivot_wider(id_cols = "period", names_from = "city", values_from = "revenue") |>
select(-period) |>
as.matrix()
y0_post <- ride |>
filter(post == 1, treated == 0) |>
pivot_wider(id_cols = "period", names_from = "city", values_from = "revenue") |>
select(-period) |>
as.matrix()
y1_post <- ride |>
filter(post == 1, treated == 1) |>
pivot_wider(id_cols = "period", names_from = "city", values_from = "revenue") |>
select(-period) |>
as.matrix()
# Weights from OLS
ols <- lm(y1_pre ~ 0 + y0_pre)
w_ols <- coef(ols)
print(w_ols)
# Counterfactual / Synthetic control unit
y_sc_post <- y0_post %*% w_ols
# ATT
mean(y1_post - y_sc_post)
# Counterfactual / Synthetic control unit
y_sc_post <- y0_post %*% w_ols
# ATT
mean(y1_post - y_sc_post)
# Counterfactual / Synthetic control unit
y_sc_pre <- y0_pre %*% w_ols
# Pseudo-ATT
mean(y1_pre - y_sc_pre)
# Create data frame with synthetic control and treated unit
sc_vs_trt <- tibble(
period = unique(ride$period),
y_synth = c(y_synth_pre, y_synth_post),
y_treat = c(y1_pre, y1_post)
) |>
pivot_longer(cols = c("y_synth", "y_treat"))
# Create data frame with synthetic control and treated unit
sc_vs_trt <- tibble(
period = unique(ride$period),
y_synth = c(y_sc_pre, y_sc_post),
y_treat = c(y1_pre, y1_post)
) |>
pivot_longer(cols = c("y_synth", "y_treat"))
# Line plot with treatment date highlighted
ggplot(sc_vs_trt, aes(x = period, y = value, group = name, color = name)) +
geom_line() +
geom_vline(xintercept = T0, linetype = "dashed")
# Generate plot of synthetic unit and observed treated unit
plot_synth <- function(y_sc_pre, y_sc_post) {
# Data to plot
sc_vs_trt <- tibble(
period = unique(ride$period), # periods (will be replicated)
y_synth = c(y_sc_pre, y_sc_post), # synthetic outcomes
y_treat = c(y1_pre, y1_post) # observed outcomes of treated unit
) |>
# long format for ggplot
pivot_longer(cols = c("y_synth", "y_treat"))
ggplot(sc_vs_trt,
aes(
x = period,
y = value,
group = name,
color = name)
) +
geom_line() +
geom_vline(xintercept = T0, linetype = "dashed")
}
# uniform weights
a_uni <- rep(1, N0)
a_uni
a_uni |> length()
y0_pre_uni <- a0_uni * y0_pre
y0_pre |> dim())
y0_pre |> dim()
y1_pre |> dim()
T0
T_pre
# uniform weights
a_uni <- rep(1, T_pre)
a_uni * y0_pre
y0_pre * a_uni
y1_post |> dim()
y1_pre |> dim()
y0_pre |> dim()
y0_pre[1:5, 1:5]
a_uni[1:5]
(a_uni * y0_pre)[1:5, 1:5]
(1:5 * y0_pre)[1:5, 1:5]
(1:5 %*% y0_pre)[1:5, 1:5]
(1:5 %*% as.matrix(y0_pre))[1:5, 1:5]
(1:5 %*% y0_pre[1:5, ])[1:5, 1:5]
(1:5 %*% y0_pre[1:5, ])
(1:5 %*% y0_pre[1:5, ]) |> dim()
# Sample weight vector of length 10
weights <- runif(10)  # For example, random weights
# Sample matrix of size 10x3
matrix_10x3 <- matrix(runif(30), nrow=10, ncol=3)
# Create a diagonal matrix from the weights
W <- diag(weights)
# Multiply the diagonal matrix by the original matrix
weighted_matrix <- W %*% matrix_10x3
# Print the result
print(weighted_matrix)
matrix_10x3
W
weighted_matrix
map(matrix_10x3, \(y, w) y * W)
sweep(y0_pre, 1, a_uni, "*")
y0_pre_uni <- sweep(y0_pre, 1, a_uni, "*")
y1_pre_uni <- sweep(y1_pre, 1, a_uni, "*")
a_uni <- rep(1, T_pre)
y0_pre_uni <- sweep(y0_pre, 1, a_uni, "*")
y1_pre_uni <- sweep(y1_pre, 1, a_uni, "*")
ols_uni <- lm(y1_pre ~ 0 + y0_pre_uni)
ols_uni
ols_uni <- lm(y1_pre_uni ~ 0 + y0_pre_uni)
ols_uni
rnorm(T_pre)
rbinom(T_pre)
rbinom(T_pre, size = 1)
rbinom(T_pre, size = 1, 0.5)
a_uni <- rbinom(T_pre, size = 1, 0.5)
y0_pre_uni <- sweep(y0_pre, 1, a_uni, "*")
y1_pre_uni <- sweep(y1_pre, 1, a_uni, "*")
ols_uni <- lm(y1_pre ~ 0 + y0_pre_uni)
ols_uni
ols_uni <- lm(y1_pre_uni ~ 0 + y0_pre_uni)
ols_uni
a_uni <- rbinom(T_pre, size = 1, 0.5) + .1
y0_pre_uni <- sweep(y0_pre, 1, a_uni, "*")
y1_pre_uni <- sweep(y1_pre, 1, a_uni, "*")
ols_uni <- lm(y1_pre ~ 0 + y0_pre_uni)
ols_uni
ols_uni <- lm(y1_pre_uni ~ 0 + y0_pre_uni)
ols_uni
# custom weights
a_adj <- seq(1, N0, 1)
a_adj <- N0*a_adj / sum(a_adj)
y0_pre_uni <- sweep(y0_pre, 1, a_adj, "*")
y1_pre_uni <- sweep(y1_pre, 1, a_adj, "*")
# custom weights
a_adj <- seq(1, N0, 1)
a_adj <- N0*a_adj / sum(a_adj)
y0_pre_adj <- sweep(y0_pre, 1, a_adj, "*")
# custom weights
a_adj <- seq(1, T_pre, 1)
a_adj <- T_pre*a_adj / sum(a_adj)
a_adj
y0_pre_adj <- sweep(y0_pre, 1, a_adj, "*")
y1_pre_adj <- sweep(y1_pre, 1, a_adj, "*")
ols_adj <- lm(y1_pre ~ 0 + as.matrix(y0_pre_adj))
ols_adj
coef(ols_adj)
sum(coef(ols_adj))
all(coef(ols) == coef(ols_adj))
coef(ols_adj)
coef(ols_uni)
coef(ols)
# uniform weights
a_uni <- rep(1, T_pre)
y0_pre_uni <- sweep(y0_pre, 1, a_uni, "*")
y1_pre_uni <- sweep(y1_pre, 1, a_uni, "*")
lm(y1_pre_uni ~ 0 + y0_pre_uni)
lm(y1_pre ~ 0 + y0_pre)
all(coef(ols) == coef(ols_uni))
# () get weights with OLS only on pre-outcomes
ols <- lm(y1_pre ~ 0 + y0_pre)
coef(ols)
coef(ols)
sum(coef(ols))
w_ols <- coef(ols)
all(coef(ols) == coef(ols_uni))
# uniform weights
a_uni <- rep(1, T_pre)
y0_pre_uni <- sweep(y0_pre, 1, a_uni, "*")
y1_pre_uni <- sweep(y1_pre, 1, a_uni, "*")
ols_uni <- lm(y1_pre_uni ~ 0 + y0_pre_uni)
coef(ols_uni)
sum(coef(ols_uni))
all(coef(ols) == coef(ols_uni))
sum(w_star)
library(CVXR)
w <- Variable(ncol(y0_pre))
objective <- Minimize(sum_squares(y0_pre %*% w - y1_pre))
constraints <- list(sum(w) == 1, w >= 0)
problem <- Problem(objective, constraints)
loss <- solve(problem)$value
w_star <- as.vector(solve(problem)$getValue(w))
sum(w_star)
sum(w_star >= 0)
round(w_star, 2)
# () plot
y_synth_pre <- y0_pre %*% w_star
y_synth_post <- y0_post %*% w_star
plot_synth(w_star)
# () plot
y_sc_star_pre <- y0_pre %*% w_star
y_sc_star_post <- y0_post %*% w_star
plot_synth(y_sc_pre = y_sc_star_pre, y_sc_post = y_sc_star_post)
# With same logic as above, extract covariates
x0_pre <- ride |>
filter(post == 0, treated == 0) |>
select(employment, city, period) |>
pivot_wider(id_cols = "period", names_from = "city", values_from = "employment") |>
select(-period)
# Define importance of "covariates" (actually of pre-treatment outcome vs covariates)
V <- c(1, 0)
X_v <- V[1] * as.matrix(y0_pre) + V[2] * as.matrix(x0_pre)
# Run optimization
w_v <- get_weights(X_v, y1_pre)
x_ore
x_pre
# With same logic as above, extract covariates
x0_pre <- ride |>
filter(post == 0, treated == 0) |>
select(employment, city, period) |>
pivot_wider(id_cols = "period", names_from = "city", values_from = "employment") |>
select(-period)
x0_pre
print(T_pre, T_post)
print(c(T_pre, T_post, N1, N0, T0))
print(c(T_pre, T_post, N1, N0, as.Date(T0)))
print(c(T_pre, T_post, N1, N0))
print(T0)
ride
ride <- tibble(df) |>
select(-year, -month, -summer, -pre_summer, -post_summer)
generate_data <- function(city='Chicago', year=2010, seed=1) {
set.seed(seed)
# Load Data
df <- read.csv('content/course_weeks/week_11/us_cities_20022019_clean.csv')
df <- df[df$year > 2002, ]
# Expand to monthly data
df <- df[rep(seq_len(nrow(df)), each=12), ]
df$month <- rep(1:12, times=nrow(df)/12)
# Select only big cities
df$mean_pop <- ave(df$population, df$city, FUN=mean)
df <- df[df$mean_pop > 1, ]
df$mean_pop <- NULL
# Treatment
df$treated <- df$city == city
df$post <- df$year >= year
# Generate revenue with increased revenue during summer months
df$summer <- df$month %in% 6:8
df$pre_summer <- df$month %in% 4:5
df$post_summer <- df$month %in% 9:10
df$revenue <- df$gdp + sqrt(df$population) +
20 * sqrt(df$employment) - df$density / 100 +
(df$year - 1990) / 5 + rnorm(nrow(df), mean=0, sd=1) +
df$treated * df$post * log(pmax(2, df$year - year)) +
ifelse(df$summer, 5, 0) + ifelse(df$pre_summer, 2, 0) + ifelse(df$post_summer, 2, 0) # Increase revenue by 5 during summer months
# Create date column
df$period <- as.Date(paste(df$year, df$month, "01", sep="-"), format="%Y-%m-%d")
return(df)
}
# Example usage
df <- generate_data(city='Chicago', year=2010, seed=1)
# head(df)
ride <- tibble(df) |>
select(-year, -month, -summer, -pre_summer, -post_summer)
tibble(df) |>
select(-year, -month, -summer, -pre_summer, -post_summer)
ride <- tibble(df) |>
select(-year, -month, -summer, -pre_summer, -post_summer)
saveRDS(ride, "content/course_weeks/week_11/ride.rds")
all_cities <- unique(ride$city)
ctrl_sample <- sample(all_cities[all_cities!="Chicago"], 15)
saveRDS(ride, "content/course_weeks/week_11/ride.rds")
all_cities <- unique(ride$city)
ride <- tibble(df) |>
select(-year, -month, -summer, -pre_summer, -post_summer)
all_cities <- unique(ride$city)
ctrl_sample <- sample(all_cities[all_cities!="Chicago"], 12)
saveRDS(ride, "content/course_weeks/week_11/ride.rds")
ride <- ride |> filter(city %in% c(ctrl_sample, "Chicago"))
saveRDS(ride, "content/course_weeks/week_11/ride.rds")
#| code-fold: true
#| warning: false
# Revenue over time
ggplot(
ride,
aes(
x = period,
y = revenue,
group = city,
color = factor(treated),
linewidth = factor(treated)
)) +
geom_line(aes(alpha = factor(treated))) +
geom_vline(xintercept = T0, linetype = "dashed") +
scale_alpha_manual(values = c(.15, 1)) +
scale_linewidth_manual(values = c(.3, .5)) +
labs(color = "Treatment group", alpha = "Treatment group", linewidth = "Treatment group")
print(w_ols)
print(w_ols) |> as.data.frame()
print(w_ols) |> as.list()
plot(w_ols)
print(w_ols) |> as.data.frame()
print(w_ols) |> as_tibble()
print(as.data.frame(w_ols))
print(as.data.frame(w_ols) |> arrange(w_ols))
print(as.data.frame(w_ols) |> arrange(-w_ols))
sum(w_ols)
w_star
ride$city
unique(ride[ride$treated == 0, ]$city)
# Show weights
print(as.data.frame(w_ols) |> arrange(-w_ols))
# Show weights
print(as.data.frame(w_ols))
print(tibble(city = unique(ride[ride$treated == 0, ]$city), w_star)
print(tibble(city = unique(ride[ride$treated == 0, ]$city), w_star))
w_star
