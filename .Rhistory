schooling_2 <- dagify(
uni_degree ~ ability,
salary ~ ability,
salary ~ uni_degree,
coords = list(x = c(uni_degree = 1, salary = 3, ability = 2),
y = c(uni_degree = 1, salary = 1, ability = 2))
)
# Plot DAG
ggdag(schooling_2, use_labels = "name", text = F) +
theme_dag_cds() +
geom_dag_point(color = ggthemr::swatch()[2]) +
geom_dag_text(color = NA) +
geom_dag_edges(edge_color = "white") +
geom_dag_label_repel()
schooling_2
#| message: false
# Load tidyverse package
library(tidyverse)
# Define population size
n <- 1e+4
# Create population with two characteristics
X <- tibble(
age = runif(n, 18, 65), # draw random values from uniform distribution
sex = rbinom(n, 1, 0.5), # draw random values from binomial distribution
id = 1:n
)
# Show table
X
#| message: false
# Load tidyverse package
library(tidyverse)
# Define population size
n <- 1e+4
# Create population with two characteristics
X <- tibble(
age = runif(n, 18, 65), # draw random values from uniform distribution
sex = rbinom(n, 1, 0.5), # draw random values from binomial distribution
id = 1:n
)
# Add randomly generated treatment variable
df <- tibble(X, D = rbinom(n, 1, .5))
df
df
age_stats <- map(df$id, function(i) {
cum_mean <- mean(df[1:i, ]$age)
cum_se <- sd(df[1:i, ]$age) / sqrt(i)
return(tibble(
N = 1:1e+4,
mean = cum_mean,
se = cum_se,
x = "age"
))
}) %>% bind_rows()
sex_stats <- map(df$id, function(i) {
cum_mean <- mean(df[1:i, ]$sex)
cum_se <- sd(df[1:i, ]$sex) / sqrt(i)
return(tibble(
N = 1:1e+4,
mean = cum_mean,
se = cum_se,
x = "sex"
))
}) %>% bind_rows()
bind_rows(age_stats, sex_stats) %>% head
bind_rows(age_stats, sex_stats) %>% tail
age_stats
age_stats %>% filter(is.na(se))
sex_stats %>% filter(is.na(se))
sex_stats
1e+4
df
df$id
df$id %>% max
age_stats <- map(df$id, function(i) {
cum_mean <- mean(df[1:i, ]$age)
cum_se <- sd(df[1:i, ]$age) / sqrt(i)
return(tibble(
#N = 1:1e+4,
mean = cum_mean,
se = cum_se,
x = "age"
))
}) %>% bind_rows()
age_stats
age_stats <- map(df$id, function(i) {
cum_mean <- mean(df[1:i, ]$age)
cum_se <- sd(df[1:i, ]$age) / sqrt(i)
return(tibble(
mean = cum_mean,
se = cum_se,
x = "age"
))
}) %>% bind_rows() %>%
add_column(N = 1:1e+4)
sex_stats <- map(df$id, function(i) {
cum_mean <- mean(df[1:i, ]$sex)
cum_se <- sd(df[1:i, ]$sex) / sqrt(i)
return(tibble(
#N = 1:1e+4,
mean = cum_mean,
se = cum_se,
x = "sex"
))
}) %>% bind_rows() %>%
add_column(N = 1:1e+4)
bind_rows(age_stats, sex_stats) %>% head
bind_rows(age_stats, sex_stats) %>% tail
df_stats <- bind_rows(age_stats, sex_stats)
df_stats
df$D
df
df_stats
df_stats %>% saveRDS("content/toolbox/rand_stats.rds")
df_stats
df
#| message: false
# Load tidyverse package
library(tidyverse)
# Define population size
n <- 1e+4
# Create population with two characteristics
X <- tibble(
age = runif(n, 18, 65), # draw random values from uniform distribution
sex = rbinom(n, 1, 0.5), # draw random values from binomial distribution
id = 1:n
)
# Add randomly generated treatment variable
df <- tibble(X, D = rbinom(n, 1, .5))
df
age_stats <- map(df$id, function(i) {
cum_mean <- mean(df[1:i, ]$age)
cum_se <- sd(df[1:i, ]$age) / sqrt(i)
return(tibble(
mean = cum_mean,
se = cum_se,
variable = "age"
))
}) %>% bind_rows() %>%
add_column(N = df$id, df = df$D)
sex_stats <- map(df$id, function(i) {
cum_mean <- mean(df[1:i, ]$sex)
cum_se <- sd(df[1:i, ]$sex) / sqrt(i)
return(tibble(
#N = 1:1e+4,
mean = cum_mean,
se = cum_se,
variable = "sex"
))
}) %>% bind_rows() %>%
add_column(N = df$id, df = df$D)
df_stats <- bind_rows(age_stats, sex_stats)
df_stats %>% saveRDS("content/toolbox/rand_stats.rds")
df_stats
subset(df_stats, variable=="age")
subset(df_stats, variable=="age")$D
df
df$D
age_stats
age_stats <- map(df$id, function(i) {
cum_mean <- mean(df[1:i, ]$age)
cum_se <- sd(df[1:i, ]$age) / sqrt(i)
return(tibble(
mean = cum_mean,
se = cum_se,
variable = "age"
))
}) %>% bind_rows() %>%
add_column(N = df$id, df = df$D)
df
age_stats <- map(df$id, function(i) {
cum_mean <- mean(df[1:i, ]$age)
cum_se <- sd(df[1:i, ]$age) / sqrt(i)
return(tibble(
mean = cum_mean,
se = cum_se,
variable = "age"
))
}) %>% bind_rows() %>%
add_column(N = df$id, D = df$D)
sex_stats <- map(df$id, function(i) {
cum_mean <- mean(df[1:i, ]$sex)
cum_se <- sd(df[1:i, ]$sex) / sqrt(i)
return(tibble(
#N = 1:1e+4,
mean = cum_mean,
se = cum_se,
variable = "sex"
))
}) %>% bind_rows() %>%
add_column(N = df$id, D = df$D)
df_stats <- bind_rows(age_stats, sex_stats)
df_stats %>% saveRDS("content/toolbox/rand_stats.rds")
df_stats
df_stats
df
df[1:10]
df[1:10,]
df[1:10,] %>% group_by(D) %>% summarise(mean(age))
df[1:10,] %>% group_by(D) %>% summarise(mean(age), sd(ag))
df[1:10,] %>% group_by(D) %>% summarise(mean(age), sd(age))
df
df %>% pivot_longer(cols = c("age", "sex"))
df[1, 10] %>%
pivot_longer(cols = c("age", "sex"))
df[1:10, ] %>%
pivot_longer(cols = c("age", "sex"))
df[1:10, ] %>%
pivot_longer(cols = c("age", "sex")) %>%
group_by(D) %>%
summarise(
mean(age), sd(age)
)
df[1:10, ] %>%
pivot_longer(cols = c("age", "sex"), names_to = "variable") %>%
group_by(D, variable) %>%
summarise(
mean(value), sd(value)
)
df[1:10, ] %>%
pivot_longer(cols = c("age", "sex"), names_to = "variable") %>%
group_by(D, variable) %>%
summarise(
mean = mean(value),
se = sd(value) / sqrt(10)
)
df[1:10, ] %>%
pivot_longer(cols = c("age", "sex"), names_to = "variable") %>%
group_by(D, variable) %>%
summarise(
mean = mean(value),
se = sd(value) / sqrt(10)
) %>%
ungroup() %>%
add_column(N = i)
df[1:i, ] %>%
pivot_longer(cols = c("age", "sex"), names_to = "variable") %>%
group_by(D, variable) %>%
summarise(
mean = mean(value),
se = sd(value) / sqrt(i)
)
i<-10
df[1:i, ] %>%
pivot_longer(cols = c("age", "sex"), names_to = "variable") %>%
group_by(D, variable) %>%
summarise(
mean = mean(value),
se = sd(value) / sqrt(i)
)
df[1:i, ] %>%
pivot_longer(cols = c("age", "sex"), names_to = "variable") %>%
group_by(D, variable) %>%
summarise(
mean = mean(value),
se = sd(value) / sqrt(i)
) %>%
ungroup()
df[1:i, ] %>%
pivot_longer(cols = c("age", "sex"), names_to = "variable") %>%
group_by(D, variable) %>%
summarise(
mean = mean(value),
se = sd(value) / sqrt(i)
) %>%
ungroup() %>%
add_column(N = i)
rm(i)
df_stats <- map(df$id, function(i) {
df[1:i, ] %>%
pivot_longer(cols = c("age", "sex"), names_to = "variable") %>%
group_by(D, variable) %>%
summarise(
mean = mean(value),
se = sd(value) / sqrt(i)
) %>%
ungroup() %>%
add_column(N = i)
})
df_stats <- map(df$id, function(i) {
df[1:i, ] %>%
pivot_longer(cols = c("age", "sex"), names_to = "variable") %>%
group_by(D, variable) %>%
summarise(
mean = mean(value),
se = sd(value) / sqrt(i),
.groups = "drop"
) %>%
ungroup() %>%
add_column(N = i)
})
#| message: false
# Load tidyverse package
library(tidyverse)
# Define population size
n <- 1e+3
# Create population with two characteristics
X <- tibble(
age = runif(n, 18, 65), # draw random values from uniform distribution
sex = rbinom(n, 1, 0.5), # draw random values from binomial distribution
id = 1:n
)
# Add randomly generated treatment variable
df <- tibble(X, D = rbinom(n, 1, .5))
df
df_stats <- map(df$id, function(i) {
df[1:i, ] %>%
pivot_longer(cols = c("age", "sex"), names_to = "variable") %>%
group_by(D, variable) %>%
summarise(
mean = mean(value),
se = sd(value) / sqrt(i),
.groups = "drop"
) %>%
ungroup() %>%
add_column(N = i)
})
df_stats %>% saveRDS("content/toolbox/rand_stats.rds")
df_stats
df_stats %>% bind_rows()
df_stats[[1]]
df_stats[[2]]
df_stats[[3]]
df_stats[[4]]
df_stats<-bind_rows(df_stats)
df_stats %>% saveRDS("content/toolbox/rand_stats.rds")
df_stats %>% head
qnorm(.975)
df_stats %>% mutate(ci_l = mean - qnorm(.975)*se, ci_h = mean + qnorm(.975)*se)
df_stats <- map(df$id, function(i) {
df[1:i, ] %>%
mutate(sex = 100*sex) %>%
pivot_longer(cols = c("age", "sex"), names_to = "variable") %>%
group_by(D, variable) %>%
summarise(
mean = mean(value),
se = sd(value) / sqrt(i),
.groups = "drop"
) %>%
ungroup() %>%
add_column(N = i)
}) %>%
bind_rows() %>%
mutate(D = as.character(D)) %>%
mutate(ci_l = mean - qnorm(.975)*se, ci_h = mean + qnorm(.975)*se)
df_stats
df_stats[20:30,]
df_stats %>% saveRDS("content/toolbox/rand_stats.rds")
df_stats <- map(df$id, function(i) {
df[1:i, ] %>%
mutate(sex = 100*sex) %>%
pivot_longer(cols = c("age", "sex"), names_to = "variable") %>%
group_by(D, variable) %>%
summarise(
mean = mean(value),
se = sd(value) / sqrt(i),
.groups = "drop"
) %>%
ungroup() %>%
add_column(N = i)
}) %>%
bind_rows() %>%
mutate(D = if_else(D==0, "control", "treatment")) %>%
mutate(ci_l = mean - qnorm(.975)*se, ci_h = mean + qnorm(.975)*se)
df_stats %>% saveRDS("content/toolbox/rand_stats.rds")
df_stats
seq(10, 1e+4, 10)
seq(10, 1e+4, 10) %>% length
# Load tidyverse package
library(tidyverse)
# Define population size
n <- 1e+4
# Create population with two characteristics
X <- tibble(
age = runif(n, 18, 65), # draw random values from uniform distribution
sex = rbinom(n, 1, 0.5), # draw random values from binomial distribution
id = 1:n
)
# Add randomly generated treatment variable
df <- tibble(X, treat = rbinom(n, 1, .5))
df
# Include interaction
lm_mod <- lm(outcome ~ treat * age + treat * sex, data = df_out)
df_out <- df %>%
mutate(outcome = 0.2*treat
+ 0.01*treat*age
+ treat*sex
+ rnorm(n, 2, 3),
outcome = 10 * outcome)
# Include interaction
lm_mod <- lm(outcome ~ treat * age + treat * sex, data = df_out)
summary(lm_mod)
hist(X$age)
hist(X$age)
hist(df_out$outcome)
df_out <- df %>%
mutate(outcome = 0.2*treat
+ 0.01*treat*age
+ treat*sex
+ rnorm(n, 2, 1),
outcome = 10 * outcome)
# Include interaction
lm_mod <- lm(outcome ~ treat * age + treat * sex, data = df_out)
summary(lm_mod)
# Load tidyverse package
library(tidyverse)
# Define population size
n <- 1e+4
# Create population with two characteristics
X <- tibble(
age = runif(n, 18, 65), # draw random values from uniform distribution
sex = rbinom(n, 1, 0.5), # draw random values from binomial distribution
id = 1:n
)
# Add randomly generated treatment variable
df <- tibble(X, treat = rbinom(n, 1, .5))
df
df_out <- df %>%
mutate(outcome = 0.2*treat
+ 0.01*treat*age
+ treat*sex
+ rnorm(n, 2, 1),
outcome = 10 * outcome)
# Include interaction
lm_mod <- lm(outcome ~ treat * age + treat * sex, data = df_out)
summary(lm_mod)
# Load tidyverse package
library(tidyverse)
# Define population size
n <- 1e+4
# Create population with two characteristics
X <- tibble(
age = runif(n, 18, 65), # draw random values from uniform distribution
sex = rbinom(n, 1, 0.5), # draw random values from binomial distribution
id = 1:n
)
# Add randomly generated treatment variable
df <- tibble(X, treat = rbinom(n, 1, .5))
df
df_out <- df %>%
mutate(outcome = 0.2*treat
+ 0.01*treat*age
+ treat*sex
+ rnorm(n, 2, 0),
outcome = 10 * outcome)
# Include interaction
lm_mod <- lm(outcome ~ treat * age + treat * sex, data = df_out)
summary(lm_mod)
# Load tidyverse package
library(tidyverse)
# Define population size
n <- 1e+4
# Create population with two characteristics
X <- tibble(
age = runif(n, 18, 65), # draw random values from uniform distribution
sex = rbinom(n, 1, 0.5), # draw random values from binomial distribution
id = 1:n
)
# Add randomly generated treatment variable
df <- tibble(X, treat = rbinom(n, 1, .5))
df
df_out <- df %>%
mutate(outcome = 0.2*treat
+ 0.01*treat*age
+ treat*sex
+ rnorm(n, 2, 0.5),
outcome = 10 * outcome)
# Include interaction
lm_mod <- lm(outcome ~ treat * age + treat * sex, data = df_out)
summary(lm_mod)
swirl()
swirl::swirl()
main()
swirl::main()
swirl::main()
siwrl()
swirl::bye()
swirl::swirl()
swirl::swirl()
swirl::bye()
swirl::swirl()
which git
1. Find `Pages` in the menu on the left and make sure the source *GitHub Action* is set.
readRDS("datasets/hospdd.rds")
df<-readRDS("datasets/hospdd.rds")
df$satis %>% summary
df[df$hospital <= 18 & df$month <=3,]
rlang::last_trace()
df[df$hospital <= 18 &,]
df[df$hospital <= 18,]
df[df$month <= 3,]
df
df$frequency %>% as.numeric()
class(df$month)<-"Numeric"
df[df$month <= 3,]
df
class(df$frequency)<-"Numeric"
class(df$procedure)<-"Numeric"
df
readRDS("datasets/abtest_online.rds")
readRDS("datasets/car_prices.rds")
class(df$procedure)<-"dbl"
df
df$procedure %>% sum
class(df$month)<-"int"
df$month %>% sum
class(df$frequency)<-"int"
df
df %>% saveRDS("datasets/hospdd.rds")
readRDS("datasets/hospdd.rds")
readRDS("datasets/abtest_online.rds")
readRDS("datasets/abtest_online.rds")
arrow::read_feather("/Users/oli/my_drive/TUHH/01_research/07_media/03_code/Python/workspace_processing/_all/matched_de2en_2023_29.feather")
