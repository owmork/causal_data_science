n <- 10000
weekday <- sample(1:7, n, replace = TRUE)
rating <- sample(seq(3.5, 4.9, .1), n, replace = TRUE)
temperature <- round(rnorm(n, mean = 18, sd = 5), 1)
price <- round(rnorm(n, mean = 25 + rating + as.numeric(weekday %in% c(1, 7)), sd = 1), 1)
prices <- tibble(
weekday = weekday,
rating = rating,
temperature = temperature,
price = price,
sales = sales(price, weekday, rating, temperature)
)
summary(prices)
# Price elasticity
price_elast <- function(price, weekday, rating, temperature) {
return(-8 + 0.2 * price + 2 * as.numeric(weekday %in% c(1, 7)) + 0.25 * (rating) - 1.8*(temperature/20 - 14/20)^2)
}
# Sales
sales <- function(price, weekday, rating, temperature) {
elast <- -abs(price_elast(price, weekday, rating, temperature))
output <-
rnorm(
length(price),
mean = 120 + 10 * as.numeric(weekday %in% c(1, 7)) + 1 * elast * price - 5*(temperature/20 - 14/20)^2 ,
sd = 10
)
return(as.integer(output))
}
n <- 10000
weekday <- sample(1:7, n, replace = TRUE)
rating <- sample(seq(3.5, 4.9, .1), n, replace = TRUE)
temperature <- round(rnorm(n, mean = 18, sd = 5), 1)
price <- round(rnorm(n, mean = 25 + rating + as.numeric(weekday %in% c(1, 7)), sd = 1), 1)
prices <- tibble(
weekday = weekday,
rating = rating,
temperature = temperature,
price = price,
sales = sales(price, weekday, rating, temperature)
)
summary(prices)
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating + temperature + I(temperature^2), data = prices)
summary(mod_ols)
map(10:20, ~price_elast(.x, 1, 4, 15))
map(2:3, ~price_elast(25, .x, 4, 15))
map(1:2, ~price_elast(25, .x, 4, 15))
map(3:5, ~price_elast(25, 1, .x, 15))
map(c(5, 15, 25), ~price_elast(25, 1, 4, .x))
map(10:20, ~price_elast(.x, 1, 4, 15))
price_elast <- function(price, weekday, rating, temperature) {
return(-8 + 2 * as.numeric(weekday %in% c(1, 7)) + 0.25 * (rating) - 1.8*(temperature/20 - 14/20)^2)
}
map(10:20, ~price_elast(.x, 1, 4, 15))
map(1:2, ~price_elast(25, .x, 4, 15))
map(3:5, ~price_elast(25, 1, .x, 15))
map(c(5, 15, 25), ~price_elast(25, 1, 4, .x))
price_elast <- function(price, weekday, rating, temperature) {
return(-8 + 2 * as.numeric(weekday %in% c(1, 7)) + 0.25 * (rating) - 4*(temperature/20 - 14/20)^2)
}
map(c(5, 15, 25), ~price_elast(25, 1, 4, .x))
# Sales
sales <- function(price, weekday, rating, temperature) {
elast <- -abs(price_elast(price, weekday, rating, temperature))
output <-
rnorm(
length(price),
mean = 120 + 10 * as.numeric(weekday %in% c(1, 7)) + 1 * elast * price - 5*(temperature/20 - 14/20)^2 ,
sd = 10
)
return(as.integer(output))
}
n <- 10000
weekday <- sample(1:7, n, replace = TRUE)
rating <- sample(seq(3.5, 4.9, .1), n, replace = TRUE)
temperature <- round(rnorm(n, mean = 18, sd = 5), 1)
price <- round(rnorm(n, mean = 25 + rating + as.numeric(weekday %in% c(1, 7)), sd = 1), 1)
prices <- tibble(
weekday = weekday,
rating = rating,
temperature = temperature,
price = price,
sales = sales(price, weekday, rating, temperature)
)
summary(prices)
price_elast <- function(price, weekday, rating, temperature) {
ela <- -8 + 2 * as.numeric(weekday %in% c(1, 7)) + 0.25 * (rating) - 4*(temperature/20 - 14/20)^2
ela <- ela / 5
return(ela)
}
# Sales
sales <- function(price, weekday, rating, temperature) {
elast <- -abs(price_elast(price, weekday, rating, temperature))
output <-
rnorm(
length(price),
mean = 120 + 10 * as.numeric(weekday %in% c(1, 7)) + 1 * elast * price - 5*(temperature/20 - 14/20)^2 ,
sd = 10
)
return(as.integer(output))
}
n <- 10000
weekday <- sample(1:7, n, replace = TRUE)
rating <- sample(seq(3.5, 4.9, .1), n, replace = TRUE)
temperature <- round(rnorm(n, mean = 18, sd = 5), 1)
price <- round(rnorm(n, mean = 25 + rating + as.numeric(weekday %in% c(1, 7)), sd = 1), 1)
prices <- tibble(
weekday = weekday,
rating = rating,
temperature = temperature,
price = price,
sales = sales(price, weekday, rating, temperature)
)
summary(prices)
# Naive estimate
mod_naive <- lm(sales ~ price, data = prices)
summary(mod_naive)
# OLS
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating, data = prices)
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating + temperature, data = prices)
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating + temperature + I(temperature^2), data = prices)
summary(mod_ols)
price_elast <- function(price, weekday, rating, temperature) {
ela <- -8 + 2 * as.numeric(weekday %in% c(1, 7)) + 0.25 * (rating) - 4*(temperature/20 - 14/20)^2
ela <- ela / 2.5
return(ela)
}
map(10:20, ~price_elast(.x, 1, 4, 15))
map(1:2, ~price_elast(25, .x, 4, 15))
map(3:5, ~price_elast(25, 1, .x, 15))
map(c(5, 15, 25), ~price_elast(25, 1, 4, .x))
# Sales
sales <- function(price, weekday, rating, temperature) {
elast <- -abs(price_elast(price, weekday, rating, temperature))
output <-
rnorm(
length(price),
mean = 120 + 10 * as.numeric(weekday %in% c(1, 7)) + 1 * elast * price - 5*(temperature/20 - 14/20)^2 ,
sd = 10
)
return(as.integer(output))
}
n <- 10000
weekday <- sample(1:7, n, replace = TRUE)
rating <- sample(seq(3.5, 4.9, .1), n, replace = TRUE)
temperature <- round(rnorm(n, mean = 18, sd = 5), 1)
price <- round(rnorm(n, mean = 25 + rating + as.numeric(weekday %in% c(1, 7)), sd = 1), 1)
prices <- tibble(
weekday = weekday,
rating = rating,
temperature = temperature,
price = price,
sales = sales(price, weekday, rating, temperature)
)
summary(prices)
# Naive estimate
mod_naive <- lm(sales ~ price, data = prices)
summary(mod_naive)
# OLS
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating, data = prices)
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating + temperature, data = prices)
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating + temperature + I(temperature^2), data = prices)
summary(mod_ols)
prices$sales
mean(prices$sales<0)
sum(prices$sales<0)
# Sales
sales <- function(price, weekday, rating, temperature) {
elast <- -abs(price_elast(price, weekday, rating, temperature))
output <-
rnorm(
length(price),
mean = 130 + 10 * as.numeric(weekday %in% c(1, 7)) + 1 * elast * price - 5*(temperature/20 - 14/20)^2 ,
sd = 10
)
return(as.integer(output))
}
n <- 10000
weekday <- sample(1:7, n, replace = TRUE)
rating <- sample(seq(3.5, 4.9, .1), n, replace = TRUE)
temperature <- round(rnorm(n, mean = 18, sd = 5), 1)
price <- round(rnorm(n, mean = 25 + rating + as.numeric(weekday %in% c(1, 7)), sd = 1), 1)
prices <- tibble(
weekday = weekday,
rating = rating,
temperature = temperature,
price = price,
sales = sales(price, weekday, rating, temperature)
)
summary(prices)
sum(prices$sales<0)
prices <- tibble(
weekday = weekday,
rating = rating,
temperature = temperature,
price = price,
sales = abs(sales(price, weekday, rating, temperature))
)
summary(prices)
# Naive estimate
mod_naive <- lm(sales ~ price, data = prices)
summary(mod_naive)
# OLS
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating, data = prices)
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating + temperature, data = prices)
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating + temperature + I(temperature^2), data = prices)
summary(mod_ols)
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating + temperature, data = prices)
summary(mod_ols)
# OLS
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating, data = prices)
summary(mod_ols)
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating + temperature + I(temperature^2), data = prices)
summary(mod_ols)
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating + temperature, data = prices)
summary(mod_ols)
# saveRDS(prices |> select(-temperature), "content/course_weeks/week_04/prices.rds")
# saveRDS(prices, "content/course_weeks/week_04/prices_new.rds")
# Naive estimate
mod_naive <- lm(sales ~ price, data = prices)
summary(mod_naive)
# OLS
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating, data = prices)
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating + temperature, data = prices)
mod_ols <- lm(sales ~ price + as.factor(weekday) + rating + temperature + I(temperature^2), data = prices)
summary(mod_ols)
# (1) Debiasing:
mod_D <- lm(price ~ as.factor(weekday) + rating + temperature, prices)
D_hat <- mod_D$residuals
# (2) Denoising:
mod_Y <- lm(sales ~ as.factor(weekday) + rating + temperature, prices)
Y_hat <- mod_Y$residuals
# (3) Residual regression
mod_fwl <- lm(Y_hat ~ 0 + D_hat)
summary(mod_fwl)
ggplot(prices, aes(y = sales, x = price)) +
geom_point(alpha = .2) +
geom_smooth(method='lm') +
labs(x = "Price (X)", y = "Sales (Y)")
# Add residuals to data frame
prices <- prices |> mutate(sales_hat = Y_hat, price_hat = D_hat)
# Plot
ggplot(prices, aes(y = sales_hat, x = price_hat)) +
geom_point(alpha = .2) +
geom_smooth(method='lm') +
labs(x = "Price residuals (X_hat)", y = "Sales residuals (Y_hat)")
hp<-readRDS("/Users/oli/my_drive/02_TUHH/03_github/_ss24_cds_assignments/ss24_cds_week_4/health_program.rds")
hp<-readRDS("/Users/oli/my_drive/02_TUHH/03_github/_ss24_cds_assignments/ss24_cds_week_4/health_program.rds")hp
hp
# (1) Matching
match_ps <- matchit(
card ~ propensity,
data = membership,
estimand = "ATT",
method = "nearest",
distance = "mahalanobis",
ratio = 1,
replace = T
)
summary(match_ps)
# Use matched data
df_ps <- match.data(match_ps)
print(df_ps)
# (2) Estimation
mod_ps <- lm(avg_purch ~ card, data = df_ps, weights = weights)
summary(mod_ps)
match_ps2 <- matchit(
card ~ propensity,
data = membership,
estimand = "ATT",
ratio = 1,
replace = T
)
# Use matched data
df_ps2 <- match.data(match_ps2)
print(df_ps)
# (2) Estimation
mod_ps <- lm(avg_purch ~ card, data = df_ps2, weights = weights)
# (2) Estimation
mod_ps2 <- lm(avg_purch ~ card, data = df_ps2, weights = weights)
summary(mod_ps2)
summary(mod_ps)
match_ps2 <- matchit(
card ~ propensity,
data = membership,
estimand = "ATE",
ratio = 1,
replace = T
)
# (1) Matching
match_ps <- matchit(
card ~ propensity,
data = membership,
estimand = "ATE",
method = "nearest",
distance = "mahalanobis",
ratio = 1,
replace = T
)
# (1) Matching
match_ps <- matchit(
card ~ propensity,
data = membership,
estimand = "ATT",
method = "nearest",
distance = "mahalanobis",
ratio = 1,
replace = T
)
# 1 vs. 1 matching
match_1v1_atu <- matchit(
card ~ pre_avg_purch + age + sex,
data = membership,
estimand = "ATU",
method = "nearest",
distance = "mahalanobis",
ratio = 1,
replace = T
)
# 1 vs. 1 matching
match_1v1_atu <- matchit(
card ~ pre_avg_purch + age + sex,
data = membership,
estimand = "ATC",
method = "nearest",
distance = "mahalanobis",
ratio = 1,
replace = T
)
match_1v1_atu <- matchit(
card ~ pre_avg_purch + age + sex,
data = membership,
estimand = "ATC",
method = "nearest",
distance = "mahalanobis",
ratio = 1,
replace = T
)
# Use matched data
df_1v1_atu <- match.data(match_1v1_atu)
print(df_1v1_atu)
# (2) Estimation
mod_1v1_atu <- lm(avg_purch ~ card, data = df_1v1_atu, weights = weights)
summary(mod_1v1_atu)
summary(mod_1v1)
mod_1v1_atu$coefficients
mod_1v1_atu$coefficients[2]
df_1v1_atu
summary(match_1v1_atu)
288+165
summary(match_1v1)
# ATE = p_T * ATT + p_C * ATC
weighted.mean(c(mod_1v1$coefficients[2], mod_1v1_atu$coefficients[2]), c(453, 547))
summary(match_1v1_atu)
547+288
df_ps2
df_ps |> filter(card==1)
df_ps |> filter(card==1) |> pull(weights)
df_ps |> filter(card==1) |> pull(weights) |> summary()
df_ps |> filter(card==0) |> pull(weights) |> summary()
source("~/.active-rstudio-document")
match_ps2 <- matchit(
card ~ propensity,
data = membership,
estimand = "ATT",
distance = "glm",
link = "logit",
ratio = 1,
replace = T
)
# Use matched data
df_ps2 <- match.data(match_ps2)
print(df_ps)
# (2) Estimation
mod_ps2 <- lm(avg_purch ~ card, data = df_ps2, weights = weights)
summary(mod_ps2)
#| code-fold: true
# Frisch–Waugh–Lovell Theorem: 3-step procedure
# (1) Debiasing:
mod_D <- lm(price ~ as.factor(weekday) + rating, prices)
D_hat <- mod_D$residuals
# (2) Denoising:
mod_Y <- lm(sales ~ as.factor(weekday) + rating, prices)
Y_hat <- mod_Y$residuals
# (3) Residual regression
mod_fwl <- lm(Y_hat ~ 0 + D_hat)
summary(mod_fwl)
saveRDS(prices |> select(-temperature), "content/course_weeks/week_04/prices.rds")
saveRDS(prices, "content/course_weeks/week_04/prices_new.rds")
setwd("~/my_drive/02_TUHH/03_github/causal_ds_ss24")
path <- "/Users/oli/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_04/prices.rds"
readRDS(path)
readRDS(path) |> select(-sales_hat, -price_hat) |> saveRDS(path)
library(tidyverse)
readRDS(path) |> select(-sales_hat, -price_hat) |> saveRDS(path)
prices_new <- readRDS("~/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_04/prices_new.rds")
prices_new
path <- "content/course_weeks/week_04/prices_new.rds"
readRDS(path) |> select(-sales_hat, -price_hat) |> saveRDS(path)
install.packages("magick")
install.packages("pdftools")
email <- read_csv(file = "content/course_weeks/week_05/email_obs_data.csv") |> sample_n(1e+3)
library(tidyverse)
email <- read_csv(file = "content/course_weeks/week_05/email_obs_data.csv") |> sample_n(1e+3)
glimpse(email)
library(grf)
# Initialize nuisance vectors
n <- nrow(email)
mhat <- rep(NA, n)
ehat <- rep(NA, n)
# Draw random indices for sample 1
index_s1 <- sample(1:n, n/2)
# Sample 1 (S1): covariates, treatment and outcome
X1 <- email[index_s1, ] |> select(-mkt_email, -next_mnth_pv) |> as.matrix()
D1 <- email[index_s1, ] |> select(mkt_email) |> as.matrix()
Y1 <- email[index_s1, ] |> select(next_mnth_pv) |> as.matrix()
# Sample 2 (S2): covariates, treatment and outcome
X2 <- email[-index_s1, ] |> select(-mkt_email, -next_mnth_pv) |> as.matrix()
D2 <- email[-index_s1, ] |> select(mkt_email) |> as.matrix()
Y2 <- email[-index_s1, ] |> select(next_mnth_pv) |> as.matrix()
# Model: S1 - Predict: S2
rf1_D <- regression_forest(X = X1, Y = D1)
rf1_Y <- regression_forest(X = X1, Y = Y1)
ehat[-index_s1] <- predict(rf1_D, newdata = X2)$predictions
mhat[-index_s1] <- predict(rf1_Y, newdata = X2)$predictions
# Model: S2 - Predict: S1
rf2_D <- regression_forest(X = X2, Y = D2)
rf2_Y <- regression_forest(X = X2, Y = Y2)
ehat[index_s1] <- predict(rf, newdata = X1)$predictions
# RORR
res_y <- Y - mhat
res_w <- W - ehat
pl_2f <- lm_robust(res_y ~ 0 + res_w)
ehat[index_s1] <- predict(rf, newdata = X1)$predictions
ehat[index_s1] <- predict(rf2_D, newdata = X1)$predictions
mhat[index_s1] <- predict(rf2_Y, newdata = X1)$predictions
# RORR
res_y <- Y - mhat
as.matrix(email) |> names()
as.matrix(email) |> colnames()
as.matrix(email)[, "next_mnth_pv"]
# RORR
Y <- as.matrix(email)[, "next_mnth_pv"]
res_y <- Y - mhat
res_y
D <- as.matrix(email)[, "mkt_email"]
res_Y <- Y - mhat
res_D <- D - ehat
pl_2f <- lm_robust(res_Y ~ 0 + res_D)
pl_2f <- estimatr::lm_robust(res_Y ~ 0 + res_D)
summary(pl_2f)
as.matrix(email)[, c("next_mnth_pv")]
as.matrix(email)[, -c("next_mnth_pv")]
pl <- lm(res_Y ~ 0 + res_D)
summary(pl_2f)
summary(pl)
# Model in S1, predict in S2
rf1_D <- regression_forest(X = X1, Y = D1)
rf1_Y0 <- regression_forest(X1[D1==0,], Y1[D1==0])
rf1_Y1 <- regression_forest(X1[D1==1,], Y1[D1==1])
ehat[-index_s1] <- predict(rf1_D, newdata = X2)$predictions
m0hat[-index_s1] <- predict(rf1_Y0, newdata = X2)$predictions
rf2_D <- regression_forest(X = X2, Y = D2)
rf2_Y0 <- regression_forest(X2[D2==0,], Y2[D2==0])
rf2_Y1 <- regression_forest(X2[D2==1,], Y2[D2==1])
ehat[-index_s1] <- predict(rf2_D, newdata = X2)$predictions
m0hat = rep(NA,n)
m1hat = rep(NA,n)
rf2_D <- regression_forest(X = X2, Y = D2)
rf2_Y0 <- regression_forest(X2[D2==0,], Y2[D2==0])
rf2_Y1 <- regression_forest(X2[D2==1,], Y2[D2==1])
ehat[-index_s1] <- predict(rf2_D, newdata = X2)$predictions
m0hat[-index_s1] <- predict(rf2_Y0, newdata = X2)$predictions
m1hat[-index_s1] <- predict(rf2_Y1, newdata = X2)$predictions
ehat <- rep(NA,n)
m0hat <- rep(NA,n)
m1hat <- rep(NA,n)
# Model in S1, predict in S2
rf1_D <- regression_forest(X = X1, Y = D1)
rf1_Y0 <- regression_forest(X1[D1==0,], Y1[D1==0])
rf1_Y1 <- regression_forest(X1[D1==1,], Y1[D1==1])
ehat[-index_s1] <- predict(rf1_D, newdata = X2)$predictions
m0hat[-index_s1] <- predict(rf1_Y0, newdata = X2)$predictions
m1hat[-index_s1] <- predict(rf1_Y1, newdata = X2)$predictions
# Model in S2, predict in S1
rf2_D <- regression_forest(X = X2, Y = D2)
rf2_Y0 <- regression_forest(X2[D2==0,], Y2[D2==0])
rf2_Y1 <- regression_forest(X2[D2==1,], Y2[D2==1])
ehat[-index_s1] <- predict(rf2_D, newdata = X2)$predictions
m0hat[-index_s1] <- predict(rf2_Y0, newdata = X2)$predictions
m1hat[-index_s1] <- predict(rf2_Y1, newdata = X2)$predictions
Y_t_0 = m0hat + (1-W)*(Y-m0hat)/(1-ehat)
ehat <- rep(NA,n)
m0hat <- rep(NA,n)
m1hat <- rep(NA,n)
# Model in S1, predict in S2
rf1_D <- regression_forest(X = X1, Y = D1)
rf1_Y0 <- regression_forest(X1[D1==0,], Y1[D1==0])
rf1_Y1 <- regression_forest(X1[D1==1,], Y1[D1==1])
ehat[-index_s1] <- predict(rf1_D, newdata = X2)$predictions
m0hat[-index_s1] <- predict(rf1_Y0, newdata = X2)$predictions
m1hat[-index_s1] <- predict(rf1_Y1, newdata = X2)$predictions
# Model in S2, predict in S1
rf2_D <- regression_forest(X = X2, Y = D2)
rf2_Y0 <- regression_forest(X2[D2==0,], Y2[D2==0])
rf2_Y1 <- regression_forest(X2[D2==1,], Y2[D2==1])
ehat[-index_s1] <- predict(rf2_D, newdata = X2)$predictions
m0hat[-index_s1] <- predict(rf2_Y0, newdata = X2)$predictions
m1hat[-index_s1] <- predict(rf2_Y1, newdata = X2)$predictions
Y_t_0 <- m0hat + (1-D) * (Y-m0hat) / (1-ehat)
Y_t_1 <- m1hat + D * (Y-m1hat) / ehat
Y_ate <- Y_t_1 - Y_t_0
summary(lm(Y_ate ~ 1))
