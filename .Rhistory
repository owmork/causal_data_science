geom = "line") +
stat_function(fun = dnorm,
fill = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = u0, sd = o0),
geom = "area",
xlim = c(ci_lb0, ci_ub0)) +
stat_function(fun = dnorm,
fill = ggthemr::swatch()[2],
alpha = .5,
args = list(mean = u1, sd = o1),
geom = "area",
xlim = c(ci_lb1, ci_ub1)) +
ggtitle("Distribution of outcomes by group") +
labs(x = "Minutes",y = "Density")
#| code-fold: true
u0 <- group_stats[group_stats$new_feature == 0, ]$mean_time_spent
u1 <- group_stats[group_stats$new_feature == 1, ]$mean_time_spent
o0 <- group_stats[group_stats$new_feature == 0, ]$se_time_spent
o1 <- group_stats[group_stats$new_feature == 1, ]$se_time_spent
ci_lb0 <- group_stats[group_stats$new_feature == 0, ]$ci_lb
ci_lb1 <- group_stats[group_stats$new_feature == 1, ]$ci_lb
ci_ub0 <- group_stats[group_stats$new_feature == 0, ]$ci_ub
ci_ub1 <- group_stats[group_stats$new_feature == 1, ]$ci_ub
ggplot(data.frame(x = c(55, 70)), aes(x)) +
stat_function(fun = dnorm,
color = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = u0, sd = o0),
geom = "line") +
stat_function(fun = dnorm,
color = ggthemr::swatch()[2],
alpha = .5,
args = list(mean = u1, sd = o1),
geom = "line") +
stat_function(fun = dnorm,
fill = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = u0, sd = o0),
geom = "area",
xlim = c(ci_lb0, ci_ub0)) +
stat_function(fun = dnorm,
fill = ggthemr::swatch()[2],
alpha = .5,
args = list(mean = u1, sd = o1),
geom = "area",
xlim = c(ci_lb1, ci_ub1)) +
ggtitle("Distribution of outcomes by group") +
labs(x = "Minutes",y = "Density")
# Get means
mu_0 <- group_stats[group_stats$new_feature==0, ]$mean_time_spent
mu_1 <- group_stats[group_stats$new_feature==1, ]$mean_time_spent
# Get standard errors
se_0 <- group_stats[group_stats$new_feature==0, ]$se_time_spent
se_1 <- group_stats[group_stats$new_feature==1, ]$se_time_spent
diff_mu <- mu_1 - mu_0
diff_se <- sqrt(se_1^2 + se_0^2)
diff_mu
diff_se
diff_ci_lb = diff_mu - qnorm(.975) * diff_se
diff_ci_ub = diff_mu + qnorm(.975) * diff_mu
print(c(diff_ci_lb, diff_ci_ub))
(1 - pnorm(t_stat)) * 2
lr <- lm(time_spent ~ new_feature, data = df)
summary(lr)
diff_mu
mean(c(-1.2, 7.4))
# Grouping by the treatment column and calculating the mean, standard deviation,
# sample size, and standard error of the mean
# column by group
group_stats <- df |>
group_by(new_feature) |>
summarise(
mean_time_spent = mean(time_spent),
# add standard deviation
sd_time_spent = sd(time_spent),
# add sample size
n_obs = n()
) |>
ungroup() |>
# Add a new column with the standard error of the mean
mutate(
se_time_spent = sd_time_spent / sqrt(n_obs),
# adding confidence intervals (lower and upper bound)
ci_lb = mean_time_spent - qnorm(.975) * se_time_spent,
ci_ub = mean_time_spent + qnorm(.975) * se_time_spent
)
# Show group-specific statistics
group_stats
mu_0
mu_1
mu_1*109
mu_1*10
diff_ci_lb = diff_mu - qnorm(.975) * diff_se
diff_ci_ub = diff_mu + qnorm(.975) * diff_se
print(c(diff_ci_lb, diff_ci_ub))
mean(c(-1.2, 6.2))
# Get means
mu_0 <- group_stats[group_stats$new_feature==0, ]$mean_time_spent
mu_1 <- group_stats[group_stats$new_feature==1, ]$mean_time_spent
# Get standard errors
se_0 <- group_stats[group_stats$new_feature==0, ]$se_time_spent
se_1 <- group_stats[group_stats$new_feature==1, ]$se_time_spent
diff_mu <- mu_1 - mu_0
diff_se <- sqrt(se_1^2 + se_0^2)
diff_mu
diff_se
ggplot(data.frame(x = c(55, 70)), aes(x)) +
stat_function(fun = dnorm,
color = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line")
ggplot(data.frame(x = NA), aes(x)) +
stat_function(fun = dnorm,
color = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line")
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm,
color = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line")
ggplot(data.frame(x = c(-5, 10)), aes(x)) +
stat_function(fun = dnorm,
color = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line")
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
stat_function(fun = dnorm,
color = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line")
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
stat_function(fun = dnorm,
color = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line") +
stat_function(fun = dnorm,
color = ggthemr::swatch()[2],
alpha = .5,
args = list(mean = u1, sd = o1),
geom = "line") +
stat_function(fun = dnorm,
fill = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = u0, sd = o0),
geom = "area",
xlim = c(ci_lb0, ci_ub0)) +
stat_function(fun = dnorm,
fill = ggthemr::swatch()[2],
alpha = .5,
args = list(mean = u1, sd = o1),
geom = "area",
xlim = c(ci_lb1, ci_ub1)) +
geom_vline(xintercept = 0)
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
stat_function(fun = dnorm,
color = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line") +
stat_function(fun = dnorm,
fill = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "area",
xlim = c(diff_mu - qnorm(.975) * diff_se, diff_mu + qnorm(.975) * diff_se))
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
stat_function(fun = dnorm,
color = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line") +
stat_function(fun = dnorm,
fill = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "area",
xlim = c(diff_mu - qnorm(.975) * diff_se, diff_mu + qnorm(.975) * diff_se)) +
geom_vline(xintercept = 0) +
ggtitle("Distribution of outcomes by group") +
labs(x = "Minutes",y = "Density")
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
stat_function(fun = dnorm,
color = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line") +
stat_function(fun = dnorm,
#                fill = ggthemr::swatch()[3],
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "area",
xlim = c(diff_mu - qnorm(.975) * diff_se, diff_mu + qnorm(.975) * diff_se)) +
geom_vline(xintercept = 0) +
ggtitle("Distribution of outcomes by group") +
labs(x = "Minutes",y = "Density")
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
stat_function(fun = dnorm,
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line") +
stat_function(fun = dnorm,
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "area",
xlim = c(diff_mu - qnorm(.975) * diff_se, diff_mu + qnorm(.975) * diff_se)) +
geom_vline(xintercept = 0) +
ggtitle("Distribution of outcomes by group") +
labs(x = "Minutes",y = "Density")
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
stat_function(fun = dnorm,
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line") +
stat_function(fun = dnorm,
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "area",
xlim = c(diff_mu - qnorm(.975) * diff_se, diff_mu + qnorm(.975) * diff_se)) +
geom_vline(xintercept = 0, color = "white") +
ggtitle("Distribution of outcomes by group") +
labs(x = "Minutes",y = "Density")
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
stat_function(fun = dnorm,
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line") +
stat_function(fun = dnorm,
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "area",
xlim = c(diff_mu - qnorm(.975) * diff_se, diff_mu + qnorm(.975) * diff_se)) +
geom_vline(xintercept = 0, color = "white") +
ggtitle("Distribution of outcomes by group") +
labs(x = "Minutes",y = "Density") +
theme(panel.grid = element_blank())
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
stat_function(fun = dnorm,
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "line") +
stat_function(fun = dnorm,
alpha = .5,
args = list(mean = diff_mu, sd = diff_se),
geom = "area",
xlim = c(diff_mu - qnorm(.975) * diff_se, diff_mu + qnorm(.975) * diff_se)) +
geom_vline(xintercept = 0, color = "white") +
ggtitle("Visual hypothesis testing with 95% CI") +
labs(x = "Minutes",y = "Density") +
theme(panel.grid = element_blank())
pnorm(0)
#| code-fold: true
ggplot(data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm,
geom = "line",
xlim = c(-3, 3)) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .3,
xlim = c(qnorm(.005), qnorm(.995))) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .5,
xlim = c(qnorm(.025), qnorm(.975))) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .9,
xlim = c(qnorm(.05), qnorm(.95))) +
geom_vline(xintercept = qnorm(.005), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.995), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.025), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.975), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.05), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.95), linetype = "dashed", color = ggthemr::swatch()[1]) +
theme(panel.grid = element_blank()) +
ggtitle("Standard Normal Distribution with 90%, 95% and 99% Confidence Interval") +
labs(x = "z-score", y = "Density")
#| code-fold: true
ggplot(data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm,
geom = "line",
xlim = c(-3, 3)) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .3,
xlim = c(qnorm(.005), qnorm(.995))) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .5,
xlim = c(qnorm(.025), qnorm(.975))) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .9,
xlim = c(qnorm(.05), qnorm(.95))) +
geom_vline(xintercept = qnorm(.005), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.995), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.025), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.975), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.05), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.95), linetype = "dashed", color = ggthemr::swatch()[1]) +
theme(panel.grid = element_blank()) +
ggtitle("Standard Normal Distribution with 90%, 95% and \n99% Confidence Interval") +
labs(x = "z-score", y = "Density")
#| code-fold: true
ggplot(data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm,
geom = "line",
xlim = c(-3, 3)) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .3,
xlim = c(qnorm(.005), qnorm(.995))) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .5,
xlim = c(qnorm(.025), qnorm(.975))) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .9,
xlim = c(qnorm(.05), qnorm(.95))) +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = qnorm(.005), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.995), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.025), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.975), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.05), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.95), linetype = "dashed", color = ggthemr::swatch()[1]) +
theme(panel.grid = element_blank()) +
ggtitle("Standard Normal Distribution with 90%, 95% and \n99% Confidence Interval") +
labs(x = "z-score", y = "Density")
#| code-fold: true
ggplot(data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm,
geom = "line",
xlim = c(-3, 3)) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .3,
xlim = c(qnorm(.005), qnorm(.995))) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .5,
xlim = c(qnorm(.025), qnorm(.975))) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .9,
xlim = c(qnorm(.05), qnorm(.95))) +
scale_x_continuous(limits = c(-3, 4), breaks = seq(-3,3,.5)) +
geom_vline(xintercept = qnorm(.005), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.995), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.025), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.975), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.05), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.95), linetype = "dashed", color = ggthemr::swatch()[1]) +
theme(panel.grid = element_blank()) +
ggtitle("Standard Normal Distribution with 90%, 95% and \n99% Confidence Interval") +
labs(x = "z-score", y = "Density")
#| code-fold: true
ggplot(data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm,
geom = "line",
xlim = c(-3, 3)) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .3,
xlim = c(qnorm(.005), qnorm(.995))) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .5,
xlim = c(qnorm(.025), qnorm(.975))) +
stat_function(fun = dnorm,
geom = "area",
fill = ggthemr::swatch()[2],
alpha = .9,
xlim = c(qnorm(.05), qnorm(.95))) +
scale_x_continuous(limits = c(-3, 3), breaks = seq(-3,3,.5)) +
geom_vline(xintercept = qnorm(.005), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.995), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.025), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.975), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.05), linetype = "dashed", color = ggthemr::swatch()[1]) +
geom_vline(xintercept = qnorm(.95), linetype = "dashed", color = ggthemr::swatch()[1]) +
theme(panel.grid = element_blank()) +
ggtitle("Standard Normal Distribution with 90%, 95% and \n99% Confidence Interval") +
labs(x = "z-score", y = "Density")
diff_ci_lb = diff_mu - qnorm(.975) * diff_se
diff_ci_ub = diff_mu + qnorm(.975) * diff_se
print(c("Lower CI" = diff_ci_lb, "Upper CI" = diff_ci_ub))
diff_se
summary(lm(minutes ~ new_algo, data = data))
summary(glm_fit)
exp(0.97)
1-exp(0.97)
exp(0.13)
exp(0.13)-1
setwd("~/my_drive/02_TUHH/03_github/causal_ds_ss24")
music <- readRDS("content/course_weeks/week_03/music.rds")
library(tidyverse)
x<-rnorm(100)
lm(x~x)
y<-x+1
lm(y~x)
summary(lm(y~x))
x<-rnorm(100)
y<-0
summary(lm(y~x))
y<-rep(0,100)
summary(lm(y~x))
qnorm(0.9)
qnorm(0.5)
qnorm(0.95)
music
# As a pre-check, test whether your random assignment worked well by comparing
# the daily number of minutes users listened to music per group.
music |>
group_by(new_algo) |>
summarise(mean(previous_minutes)) |>
ungroup()
# As a pre-check, test whether your random assignment worked well by comparing
# the daily number of minutes users listened to music per group.
music |>
group_by(new_algo) |>
summarise(mean_previous_minutes = mean(previous_minutes)) |>
ungroup()
head(music)
# Compute the average treatment effect using a linear regression.
LM <- lm(minutes ~ new_algo, data = music)
LM
summary(LM)
# Calculate 90%, 95% and 99% confidence intervals for the treatment effect and
# compare them. Which intervals are larger? And what question do they answer?
confint(LM, .9)
# Calculate 90%, 95% and 99% confidence intervals for the treatment effect and
# compare them. Which intervals are larger? And what question do they answer?
confint(LM, level = .9)
confint(LM, level = .95)
confint(LM, level = .99)
# 2
GLM <- glm(cancel ~ new_algo, family=binomial(link='logit'), data = music)
summary(GLM)
GLM$coefficients
GLM$coefficients["new_algo"]
exp(GLM$coefficients["new_algo"])
exp(GLM$coefficients["new_algo"]) - 1
setwd("~/my_drive/02_TUHH/03_github/causal_ds_ss24")
# Part 1
library(tidyverse)
music <-readRDS("content/course_weeks/week_03/music.rds")
head(music)
# As a pre-check, test whether your random assignment worked well by comparing
# the daily number of minutes users listened to music per group.
music |>
group_by(new_algo) |>
summarise(mean_previous_minutes = mean(previous_mintues)) |>
ungroup()
# As a pre-check, test whether your random assignment worked well by comparing
# the daily number of minutes users listened to music per group.
music |>
group_by(new_algo) |>
summarise(mean_previous_minutes = mean(previous_minutes)) |>
ungroup()
# Compute the average treatment effect using a linear regression.
lm(minutes ~ new_algo, data = music)
# Compute the average treatment effect using a linear regression.
lr <- lm(minutes ~ new_algo, data = music)
summary(lm)
summary(lr)
# Calculate 90%, 95% and 99% confidence intervals for the treatment effect and
# compare them. Which intervals are larger? And what question do they answer?
confint(lr, level = .9)
confint(lr, level = .99)
# Part 2
# Fit the model and return the summary statistics.
glr <- glm(cancel ~ new_algo, data = music)
summary(glr)
# Interpret the coefficients.
glr$coefficients["new_algo"]
# Interpret the coefficients.
exp(glr$coefficients["new_algo"]) - 1
# Interpret the coefficients.
100 * (exp(glr$coefficients["new_algo"]) - 1)
# Part 2
# Fit the model and return the summary statistics.
glr <- glm(cancel ~ new_algo, family=binomial(link='logit'), data = music)
summary(glr)
# Interpret the coefficients.
100 * (exp(glr$coefficients["new_algo"]) - 1)
# Interpret the coefficients.
exp(glr$coefficients["new_algo"]) - 1
music
music$log_in_day
