# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.xgboost")
# Train
lrnr_pl$train(task_pl)
# Predict CATEs
pl_class <- lrnr_pl$predict(task_pl)$response
summary(pl_class)
# Add weight and class (1 or -1) to data
df_pl <- df |>
select(-popup, -used_ftr, -time_spent) |>
add_column(sign = if_else(sign(ite_pseudo)==1, 1, -20)) |>
add_column(weight = abs(ite_pseudo))
## Specify task and learner
# Task
task_pl <- as_task_classif(df_pl, target = "sign")
# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.xgboost")
# Train
lrnr_pl$train(task_pl)
# Predict CATEs
pl_class <- lrnr_pl$predict(task_pl)$response
summary(pl_class)
lrnr_pl$model
rpart.plot(lrnr_pl$model, yesno = 2)
rpart.plot::rpart.plot(lrnr_pl$model, yesno = 2)
?rpart.plot::rpart.plot
rpart.plot::rpart.plot(yesno)
# Specify learner
lrnr_pl <- lrn("classif.rpart")
# Train
lrnr_pl$train(task_pl)
rpart.plot::rpart.plot(lrnr_pl$model, yesno = 2)
task_pl <- as_task_classif(df_pl, target = "sign")
# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.rpart")
# Train
lrnr_pl$train(task_pl)
rpart.plot::rpart.plot(lrnr_pl$model, yesno = 2)
rpart.plot::rpart.plot(lrnr_pl$model)
library(rpart.plot)
rpart.plot(lrnr_pl$model, yesno = 2)
rpart.plot(lrnr_pl$model)
rpart.plot(lrnr$model)
rpart.plot(lrnr_pl)
lrnr_pl$model
rpart.plot(lrnr_pl$model)
rpart.plot(lrnr_pl$model, roundint = T)
rpart.plot(lrnr_pl$model, roundint = F)
rpart.plot(lrnr_pl$model, roundint = F)
rpart.plot(lrnr_pl$model, roundint = F, model = T)
rpart.plot(lrnr_pl$model, roundint = F)
df_pl
# Add to data frame
df_pl$rec_class <- pl_class
# Average values by recommended class (like CLAN)
df_pl |>
group_by(rec_class) |>
summarise(
mean_age = mean(age),
mean_gender = mean(gender),
mean_premium = mean(premium),
mean_logins = mean(daily_logins)
) |>
ungroup()
# Approximation of individual treatment effects
ite_pseudo <- dml_aipw_obj$psi_b[, 1, 1]
# Add weight and class (1 or -1) to data
df_pl <- df |>
select(-popup, -used_ftr, -time_spent) |>
add_column(sign = sign(ite_pseudo)) |>
add_column(weight = abs(ite_pseudo))
## Specify task and learner
# Task
task_pl <- as_task_classif(df_pl, target = "sign")
# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.rpart")
# Train
lrnr_pl$train(task_pl)
rpart.plot(lrnr_pl$model)
df_pl
# Read data
df <- readRDS("~/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_08/rand_enc8.rds")
df <- readRDS("~/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_08/rand_enc8.rds")
df <- readRDS("~/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_08/rand_enc_w8.rds")
# Read data
df <- readRDS("~/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_08/rand_enc8.rds")
df <- readRDS("~/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_08/rand_enc8.rds")
df <- readRDS("~/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_08/rand_enc8.rds")
# Read data
df <- readRDS("~/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_08/rand_enc8.rds")
# Read data
df <- readRDS("~/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_08/rand_enc_w8.rds")
library(mlr3)
library(mlr3learners)
# Outcome
Y <- df$time_spent
# Treatment
D <- df$used_ftr
n <- length(Y)
nfolds <- 5
fold <- sample(1:nfolds, n, replace=TRUE)
# Initialize empty nuisance vectors
ehat <- rep(NA, n)
muhat0 <- rep(NA, n)
muhat1 <- rep(NA, n)
# Define prediction model for the treatment/exposure
task_e <- as_task_classif(df |> select(-time_spent, -popup), target = "used_ftr")
lrnr_e <- lrn("classif.ranger", predict_type = "prob")
# Load tidyverse
library(tidyverse)
# Define prediction model for the treatment/exposure
task_e <- as_task_classif(df |> select(-time_spent, -popup), target = "used_ftr")
lrnr_e <- lrn("classif.ranger", predict_type = "prob")
# Define prediction model for the outcome
task_mu <- as_task_regr(df |> select(-used_ftr, -popup), target = "time_spent")
lrnr_mu <- lrn("regr.ranger", predict_type = "response")
# cross fitting of nuisance parameters
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# propensity score e(x)
lrnr_e$train(task_e, row_ids = which(fold != i))
ehat[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# outcome mu(0,x)
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df$used_ftr == 0)))
muhat0[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
# outcome mu(1,x)
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df$used_ftr == 1)))
muhat1[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
}
psi_a <- rep(-1,length(Y))
psi_b_mu <- muhat1 - muhat0
psi_b_res1 <- D * (Y - muhat1) / ehat
psi_b_res0 <- (1 - D) * (Y - muhat0) / (1 - ehat)
psi_b <- psi_b_mu + psi_b_res1 - psi_b_res0
theta <- -sum(psi_b) / sum(psi_a)
theta
summary_aipw <- function(psi_a, psi_b) {
# compute ATE
theta <- -sum(psi_b) / sum(psi_a)
# compute variance
psi <- theta * psi_a + psi_b
Psi <- - psi / mean(psi_a)
sigma2 <- var(Psi)
# standard error
se <- sqrt(sigma2 / n)
# t-statistic and p-value
se <- sqrt(sigma2 / n)
t <- theta / se
p <- 2 * pt(abs(t), n ,lower = FALSE)
# bind together
return(data.frame(theta = round(theta, 3), t = round(t, 3), se = round(se, 3), p = round(p, 5)))
}
# Inference
summary_aipw(psi_a, psi_b)
# Load required packages
library(DoubleML)
library(data.table)
# suppress messages during fitting
lgr::get_logger("mlr3")$set_threshold("warn")
# Specify data object
dml_data <- DoubleMLData$new(
data = as.data.frame(df),
y_col = "time_spent",
d_cols = "used_ftr",
x_cols = c("age", "gender", "premium", "daily_logins")
)
# Specify task
dml_aipw_obj = DoubleMLIRM$new(
data = dml_data,
ml_g = lrnr_mu,
ml_m = lrnr_e,
score = "ATE",
trimming_threshold = 0.01, # to prevent too extreme weights
apply_cross_fitting = TRUE,
n_folds = 10)
# Fit and return summary
dml_aipw_obj$fit()
dml_aipw_obj$summary()
# Approximation of individual treatment effects
ite_pseudo <- dml_aipw_obj$psi_b[, 1, 1]
# Add weight and class (1 or -1) to data
df_pl <- df |>
select(-popup, -used_ftr, -time_spent) |>
add_column(sign = sign(ite_pseudo)) |>
add_column(weight = abs(ite_pseudo))
## Specify task and learner
# Task
task_pl <- as_task_classif(df_pl, target = "sign")
# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.rpart")
# Train
lrnr_pl$train(task_pl)
rpart.plot(lrnr_pl$model)
library(rpart.plot)
rpart.plot(lrnr_pl$model)
rpart.plot(lrnr_pl$model, roundint = F)
# Predict CATEs
pl_class <- lrnr_pl$predict(task_pl)$response
summary(pl_class)
df_pl
## Specify task and learner
# Task
task_pl <- as_task_classif(df_pl, target = "sign")
# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.xgboost")
# Train
lrnr_pl$train(task_pl)
# Predict CATEs
pl_class <- lrnr_pl$predict(task_pl)$response
summary(pl_class)
# Add to data frame
df_pl$rec_class <- pl_class
# Average values by recommended class (like CLAN)
df_pl |>
group_by(rec_class) |>
summarise(
mean_age = mean(age),
mean_gender = mean(gender),
mean_premium = mean(premium),
mean_logins = mean(daily_logins)
) |>
ungroup()
df <- readRDS("~/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_08/rand_enc_w8.rds")
library(mlr3)
library(mlr3learners)
# Outcome
Y = df$time_spent
# Treatment
D = df$used_ftr
# Treatment
Z = df$popup
n = length(Y)
nfolds = 5
fold = sample(1:nfolds, n, replace=TRUE)
ezhat1=ezhat0=hhat=mzhat1=mzhat0=rep(NA,n)
# learners
# Define prediction model for the treatment/exposure
task_e <- as_task_classif(df |> select(-time_spent, -popup), target = "used_ftr")
lrnr_e <- lrn("classif.ranger", predict_type = "prob")
# Define prediction model for the outcome
task_mu <- as_task_regr(df |> select(-used_ftr, -popup), target = "time_spent")
lrnr_mu <- lrn("regr.ranger", predict_type = "response")
library(tidyverse)
df <- readRDS("~/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_08/rand_enc_w8.rds")
library(mlr3)
library(mlr3learners)
# Outcome
Y = df$time_spent
# Treatment
D = df$used_ftr
# Treatment
Z = df$popup
n = length(Y)
nfolds = 5
fold = sample(1:nfolds, n, replace=TRUE)
ezhat1=ezhat0=hhat=mzhat1=mzhat0=rep(NA,n)
# learners
# Define prediction model for the treatment/exposure
task_e <- as_task_classif(df |> select(-time_spent, -popup), target = "used_ftr")
lrnr_e <- lrn("classif.ranger", predict_type = "prob")
# Define prediction model for the outcome
task_mu <- as_task_regr(df |> select(-used_ftr, -popup), target = "time_spent")
lrnr_mu <- lrn("regr.ranger", predict_type = "response")
# Define prediction model for the instrument
task_h <- as_task_classif(df |> select(-used_ftr, -time_spent), target = "popup")
lrnr_h <- lrn("classif.ranger", predict_type = "prob")
for (i in 1:nfolds){
print(paste("Fold", i, "..."))
# rfez0 = regression_forest(X[fold != i & Z==0,],W[fold != i & Z==0])
# ezhat0[fold == i] = predict(rfez0, X[fold == i,])$predictions
# propensity score e(x)
lrnr_e$train(task_e, row_ids = intersect(which(fold != i), which(df$popup == 0)))
ezhat0[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# rfez1 = regression_forest(X[fold != i & Z==1,],W[fold != i & Z==1])
# ezhat1[fold == i] = predict(rfez1, X[fold == i,])$predictions
# propensity score e(x)
lrnr_e$train(task_e, row_ids = intersect(which(fold != i), which(df$popup == 1)))
ezhat1[which(fold == i)] <- lrnr_e$predict(task_e, row_ids = which(fold == i))$prob[, 2]
# rfmz0 = regression_forest(X[fold != i & Z==0,],Y[fold != i & Z==0])
# mzhat0[fold == i] = predict(rfmz0, X[fold == i,])$predictions
# outcome mu(0,x)
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df$popup == 0)))
mzhat0[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
# rfmz1 = regression_forest(X[fold != i & Z==1,],Y[fold != i & Z==1])
# mzhat1[fold == i] = predict(rfmz1, X[fold == i,])$predictions
# outcome mu(1,x)
lrnr_mu$train(task_mu, row_ids = intersect(which(fold != i), which(df$popup == 1)))
mzhat1[which(fold == i)] <- lrnr_mu$predict(task_mu, row_ids = which(fold == i))$response
# rfh = regression_forest(X[fold != i,],Z[fold != i])
# hhat[fold == i] = predict(rfh, X[fold == i,])$predictions
# instrument h(x)
lrnr_h$train(task_h, row_ids = which(fold != i))
hhat[which(fold == i)] <- lrnr_h$predict(task_h, which(fold == i))$prob[, 2]
}
pa_late = -( ezhat1 - ezhat0 + Z * (D - ezhat1) / hhat - (1 - Z) * (D - ezhat0) / (1-hhat) )
pb_late = mzhat1 - mzhat0 + Z * (Y - mzhat1) / hhat - (1 - Z) * (Y - mzhat0) / (1-hhat)
-sum(pb_late) / sum(pa_late)
library(rpart.plot)
pb_late
# Approximation of individual treatment effects
ite_pseudo <- pb_late
# Add weight and class (1 or -1) to data
df_pl <- df |>
select(-popup, -used_ftr, -time_spent) |>
add_column(sign = sign(ite_pseudo)) |>
add_column(weight = abs(ite_pseudo))
## Specify task and learner
# Task
task_pl <- as_task_classif(df_pl, target = "sign")
# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.rpart")
# Train
lrnr_pl$train(task_pl)
rpart.plot(lrnr_pl$model)
# Predict CATEs
pl_class <- lrnr_pl$predict(task_pl)$response
summary(pl_class)
rpart.plot(lrnr_pl$model)
rpart.plot(lrnr_pl$model, roundint = F)
pb_late |> mean()
df$time_spent
df$time_spent |> mean()
# Approximation of individual treatment effects
ite_pseudo <- pb_late - 30
# Add weight and class (1 or -1) to data
df_pl <- df |>
select(-popup, -used_ftr, -time_spent) |>
add_column(sign = sign(ite_pseudo)) |>
add_column(weight = abs(ite_pseudo))
## Specify task and learner
# Task
task_pl <- as_task_classif(df_pl, target = "sign")
# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.rpart")
# Train
lrnr_pl$train(task_pl)
# Predict CATEs
pl_class <- lrnr_pl$predict(task_pl)$response
summary(pl_class)
rpart.plot(lrnr_pl$model)
rpart.plot(lrnr_pl$model, roundint = F)
ite_pseudo <- pb_late - 90
# Add weight and class (1 or -1) to data
df_pl <- df |>
select(-popup, -used_ftr, -time_spent) |>
add_column(sign = sign(ite_pseudo)) |>
add_column(weight = abs(ite_pseudo))
## Specify task and learner
# Task
task_pl <- as_task_classif(df_pl, target = "sign")
# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.rpart")
# Train
lrnr_pl$train(task_pl)
# Predict CATEs
pl_class <- lrnr_pl$predict(task_pl)$response
summary(pl_class)
ite_pseudo <- pb_late + 90
# Add weight and class (1 or -1) to data
df_pl <- df |>
select(-popup, -used_ftr, -time_spent) |>
add_column(sign = sign(ite_pseudo)) |>
add_column(weight = abs(ite_pseudo))
## Specify task and learner
# Task
task_pl <- as_task_classif(df_pl, target = "sign")
# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.rpart")
# Train
lrnr_pl$train(task_pl)
# Predict CATEs
pl_class <- lrnr_pl$predict(task_pl)$response
summary(pl_class)
ite_pseudo <- pb_late# + 90
# Add weight and class (1 or -1) to data
df_pl <- df |>
select(-popup, -used_ftr, -time_spent) |>
add_column(sign = sign(ite_pseudo)) |>
add_column(weight = abs(ite_pseudo))
## Specify task and learner
# Task
task_pl <- as_task_classif(df_pl, target = "sign")
# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.rpart")
# Train
lrnr_pl$train(task_pl)
# Predict CATEs
pl_class <- lrnr_pl$predict(task_pl)$response
summary(pl_class)
ite_pseudo <- pb_late - 5
# Add weight and class (1 or -1) to data
df_pl <- df |>
select(-popup, -used_ftr, -time_spent) |>
add_column(sign = sign(ite_pseudo)) |>
add_column(weight = abs(ite_pseudo))
## Specify task and learner
# Task
task_pl <- as_task_classif(df_pl, target = "sign")
# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.rpart")
# Train
lrnr_pl$train(task_pl)
# Predict CATEs
pl_class <- lrnr_pl$predict(task_pl)$response
summary(pl_class)
ite_pseudo <- pb_late - 2
# Add weight and class (1 or -1) to data
df_pl <- df |>
select(-popup, -used_ftr, -time_spent) |>
add_column(sign = sign(ite_pseudo)) |>
add_column(weight = abs(ite_pseudo))
## Specify task and learner
# Task
task_pl <- as_task_classif(df_pl, target = "sign")
# Assign weight column
task_pl$set_col_roles(col = "weight", roles = "weight")
# Specify learner
lrnr_pl <- lrn("classif.rpart")
# Train
lrnr_pl$train(task_pl)
# Predict CATEs
pl_class <- lrnr_pl$predict(task_pl)$response
summary(pl_class)
rpart.plot(lrnr_pl$model)
rpart.plot(lrnr_pl$model, yesno=2)
rpart.plot(lrnr_pl$model, yesno=3)
rpart.plot(lrnr_pl$model, yesno=1)
rpart.plot(lrnr_pl$model)
rpart.plot(lrnr_pl$model, roundint = F)
rpart.plot(lrnr_pl$model)
rpart.plot(lrnr_pl$model, roundint = F)
# Average values by recommended class (like CLAN)
df_pl |>
group_by(rec_class) |>
summarise(
mean_age = mean(age),
mean_gender = mean(gender),
mean_premium = mean(premium),
mean_logins = mean(daily_logins)
) |>
ungroup()
# Add to data frame
df_pl$rec_class <- pl_class
# Average values by recommended class (like CLAN)
df_pl |>
group_by(rec_class) |>
summarise(
mean_age = mean(age),
mean_gender = mean(gender),
mean_premium = mean(premium),
mean_logins = mean(daily_logins)
) |>
ungroup()
df_pl
# Average values by recommended class (like CLAN)
df_pl_CLAN <- df_pl |>
group_by(rec_class) |>
summarise(
mean_age = mean(age),
mean_gender = mean(gender),
mean_premium = mean(premium),
mean_logins = mean(daily_logins)
) |>
ungroup()
df_pl_CLAN
df_pl_CLAN
) |>
df_pl_CLAN |> pivot_longer(cols = -rec_class)
df_pl_CLAN |>
pivot_longer(cols = -rec_class) |>
ggplot(aes(x = rec_class, y = value)) +
geom_bar() +
facet_wrap(~name)
df_pl_CLAN |>
pivot_longer(cols = -rec_class) |>
ggplot(aes(x = rec_class, y = value)) +
geom_bar(stat = "identity") +
facet_wrap(~name)
df_pl_CLAN |>
pivot_longer(cols = -rec_class) |>
ggplot(aes(x = rec_class, y = value)) +
geom_bar(stat = "identity") +
facet_grid(~name, scales = "free")
df_pl_CLAN |>
pivot_longer(cols = -rec_class) |>
ggplot(aes(x = rec_class, y = value)) +
geom_bar(stat = "identity") +
facet_wrap(~name, scales = "free")
