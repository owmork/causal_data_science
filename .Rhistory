geom_vline(aes(xintercept = group - .5, color = as.factor(group)), linetype = "dashed")
# Facet plot
ggplot(Y_gt, aes(
x = time,
y = mean_y)) +
geom_point() +
geom_line() +
geom_vline(aes(xintercept = group - .5), linetype = "dashed", colour = "red") +
xlab("Week") +
ylab("Minutes watched") +
facet_wrap(~group)
# Task 3: Run an event-study without covariates to assess the parallel trends
# assumption.
evt_stdy_wo <- fixest::feols(minutes_watched ~ i(d_it_k, ref = c(-1, Inf)) | unit + time, data = stream)
summary(evt_stdy_wo)
fixest::iplot(evt_stdy_wo)
set.seed(123) # For reproducibility
# Parameters
G <- 4 # Number of groups (3 treatment groups + 1 control group)
TT <- 15 # Number of time periods (from 0 to 20)
N <- 100 # Number of units
# Coefficients
gamma <- matrix(seq(0.5, by=0.5, length.out=(G-1) * 3) / (G-1), nrow=(G-1), byrow=TRUE)
beta <- matrix(seq(0.05, by=0.005, length.out=TT * 8), ncol=8, byrow=TRUE) # Adjust beta to match the number of covariates
# Generate time-invariant covariates
age <- rnorm(N, mean=35, sd=10)
gender <- rbinom(N, 1, 0.5) # 0 for female, 1 for male
account_tenure <- sample(1:120, N, replace=TRUE)
# Generate time-varying covariates
num_drama_watched <- array(0, dim=c(N, TT))
num_comedy_watched <- array(0, dim=c(N, TT))
num_action_watched <- array(0, dim=c(N, TT))
for (i in 1:N) {
for (t in 1:TT) {
num_drama_watched[i, t] <- rpois(1, lambda=2)
num_comedy_watched[i, t] <- rpois(1, lambda=2)
num_action_watched[i, t] <- rpois(1, lambda=2)
}
}
# Combine all covariates
x <- array(0, dim=c(N, TT, 8))
for (i in 1:N) {
for (t in 1:TT) {
x[i, t, 1] <- age[i]
x[i, t, 2] <- gender[i]
x[i, t, 3] <- account_tenure[i]
x[i, t, 4] <- num_drama_watched[i, t]
x[i, t, 5] <- num_comedy_watched[i, t]
x[i, t, 6] <- num_action_watched[i, t]
x[i, t, 7:8] <- rnorm(2) # Adding two more continuous covariates
}
}
# Compute group probabilities for treatment groups only (excluding control group) using initial values of age, gender, account_tenure
exp_x_gamma <- exp(x[, 1, 1:3] %*% t(gamma)) # Use only time-invariant covariates for gamma
P_G_given_X_treatment <- exp_x_gamma / rowSums(exp_x_gamma)
P_G_given_X <- cbind(P_G_given_X_treatment * 0.75, 0.25) # Add control group with fixed probability
# Adjust group memberships to ensure an even distribution
desired_counts <- N / G
current_counts <- rep(0, G)
group_membership <- integer(N)
for (i in 1:N) {
prob <- P_G_given_X[i,]
remaining_slots <- desired_counts - current_counts
remaining_slots[remaining_slots < 0] <- 0
if (sum(remaining_slots) == 0) {
remaining_slots <- rep(1, G)
}
adjusted_prob <- prob * remaining_slots
adjusted_prob <- adjusted_prob / sum(adjusted_prob)
group_membership[i] <- sample(c(8, 9, 10, 0), 1, prob=adjusted_prob)
current_counts[ifelse(group_membership[i] == 0, 4, group_membership[i] - 7)] <- current_counts[ifelse(group_membership[i] == 0, 4, group_membership[i] - 7)] + 1
}
# Generate \eta_i based on group memberships
eta <- rnorm(N, mean=group_membership, sd=15)
# Generate untreated potential outcomes Yit(0)
y_0 <- matrix(0, nrow=N, ncol=TT)
for (t in 1:TT) {
u_it <- rnorm(N, mean=0, sd=25) # Increase noise
y_0[,t] <- 120 + 0.02 * t + eta + rowSums(x[, t, ] * beta[t, ]) + u_it # Small time trend
}
# Define a treatment effect that starts negative and converges to zero
delta_e <- function(e) {
initial_effect <- -45
final_effect <- 0
duration <- 5
if (e < duration) {
return(initial_effect * (1 - e / duration))
} else {
return(final_effect)
}
}
# Generate treated outcomes Yit(g) for treatment groups only
y_treated <- array(0, dim=c(N, TT, 4)) # Include all four groups for simplicity
for (i in 1:N) {
g <- group_membership[i]
group_index <- if (g == 0) 0 else g - 7
if (group_index != 0) {
start_period <- g
for (t in 1:TT) {
if (t >= start_period) { # Treatment groups and post-treatment periods
v_it <- rnorm(1, mean=0, sd=2) # Increase noise
e <- t - start_period
y_treated[i,t,group_index] <- y_0[i,t] + delta_e(e) + (v_it - rnorm(1, mean=0, sd=2))
} else {
y_treated[i,t,group_index] <- y_0[i,t] # Pre-treatment periods
}
}
} else {
for (t in 1:TT) {
y_treated[i,t,group_index] <- y_0[i,t] # Control group
}
}
}
# Create a data frame with the observed outcomes
data_list <- list()
for (i in 1:N) {
for (t in 1:TT) {
g <- group_membership[i]
group_index <- if (g == 0) 0 else g - 7
y <- if (group_index == 0) y_0[i,t] else y_treated[i,t,group_index]
x_t <- x[i, t, ]
data_list[[length(data_list) + 1]] <- data.frame(
unit = i, time = t, group = g, y = y,
age = x_t[1], gender = x_t[2], account_tenure = x_t[3],
num_drama_watched = x_t[4], num_comedy_watched = x_t[5], num_action_watched = x_t[6],
covariate1 = x_t[7], covariate2 = x_t[8]
)
}
}
stream <- do.call(rbind, data_list)
# Display the first few rows of the generated data
head(stream)
stream <- tibble::as_tibble(stream) |>
dplyr::rename(minutes_watched = y)
# Save
saveRDS(stream, "content/course_weeks/week_10/stream.rds")
library(tidyverse)
ggplot(stream, aes(
x = time, y = minutes_watched, group = as.factor(group), color = as.factor(group)
)) +
geom_point() +
geom_smooth()
# Task 1: Understand data
head(stream)
summary(stream)
glimpse(stream)
# Task 1: Answer the following questions:
# - How many periods?
unique(stream$time)
# - How many units?
unique(stream$unit)
# - How many cohorts/treatment groups?
unique(stream$group)
# - How many units in each cohort?
stream |> group_by(group) |> summarise(n_unit = n_distinct(unit)) |> ungroup()
# - How many treated, not-yet treated and untreated/never treated periods
# do we observe?
stream <- stream |>
# create time-variant treatment indicator D_it
mutate(d_it = case_when(
group == 0 ~ 0,
time >= group ~ 1,
.default = 0)) |>
# create relative event-time indicator D_it_k
mutate(d_it_k = case_when(
group == 0 ~ Inf,
.default = time - group))
stream |> group_by(group, d_it) |> summarise(n_unit = n_distinct(unit)) |> ungroup()
# Task 2: plot evolution of average outcomes across cohorts.
Y_gt <- stream |>
group_by(group, time) |>
summarise(mean_y = mean(minutes_watched)) |>
ungroup() |>
mutate(group = if_else(group == 0, NA, group))
# One plot
ggplot(Y_gt, aes(
x = time,
y = mean_y,
color = as.factor(group))) +
geom_line() +
geom_point() +
xlab("Week") +
ylab("Minutes watched") +
geom_vline(aes(xintercept = group - .5, color = as.factor(group)), linetype = "dashed")
# Facet plot
ggplot(Y_gt, aes(
x = time,
y = mean_y)) +
geom_point() +
geom_line() +
geom_vline(aes(xintercept = group - .5), linetype = "dashed", colour = "red") +
xlab("Week") +
ylab("Minutes watched") +
facet_wrap(~group)
# Task 3: Run an event-study without covariates to assess the parallel trends
# assumption.
evt_stdy_wo <- fixest::feols(minutes_watched ~ i(d_it_k, ref = c(-1, Inf)) | unit + time, data = stream)
summary(evt_stdy_wo)
fixest::iplot(evt_stdy_wo)
# Task 4: Run an event-study with covariates to assess the conditional parallel trends
# assumption.
evt_stdy_w <- fixest::feols(minutes_watched ~ i(d_it_k, ref = c(-1, Inf)) +
age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched
| unit + time, data = stream)
summary(evt_stdy_w)
fixest::iplot(evt_stdy_w)
# Task 5: check for overlap of covariates (question: when to use regression adjustment?)
stream |>
group_by(group) |>
summarise(across(c(
age,
gender,
account_tenure,
num_drama_watched,
num_comedy_watched,
num_action_watched), mean)) |>
ungroup()
# Task 6: Compute the static treatment effect using TWFE (w and w/o).
twfe_wo <- fixest::feols(minutes_watched ~ i(d_it, ref = c(0)) | unit + time, data = stream)
twfe_w <- fixest::feols(minutes_watched ~ i(d_it, ref = c(0)) + age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched| unit + time, data = stream)
summary(twfe_wo)
summary(twfe_w)
# Bacon-Decomposition
library(bacondecomp)
df_bacon <- bacondecomp::bacon(minutes_watched ~ d_it + age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched,
data = stream,
id_var = "unit",
time_var = "time")
df_bacon
ggplot(df_bacon$two_by_twos) +
aes(x = weight, y = estimate, shape = factor(type)) +
geom_point() +
geom_hline(yintercept = 0) +
theme_minimal() +
labs(x = "Weight", y = "Estimate", shape = "Type")
# Task 7: Any robust method
# (a) Sun-Abraham
sunab <- fixest::feols(minutes_watched ~ fixest:::sunab(group, time) + age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched | unit + time, data = stream)
summary(sunab)
fixest::iplot(sunab)
summary(sunab, agg = "ATT")
# (b) Doubly robust
drdid <- did::att_gt(
yname = "minutes_watched",
tname = "time",
idname = "unit",
gname = "group",
xformla = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched,# + unit, #  ~ 1
data = stream,
allow_unbalanced_panel = TRUE,
control_group = "nevertreated", # "notyettreated"
anticipation = 0,
clustervars = "unit",
est_method = "dr", # "reg", "ipw"
)
did::aggte(drdid, type="simple")
did::aggte(drdid, type="group")
drdid_evt_sty <- did::aggte(drdid, type="dynamic")
did::ggdid(drdid_evt_sty)
# (c) Two-Stage DiD
# Static model
twsdid <- did2s::did2s(
stream,
yname = "minutes_watched",
first_stage = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched | unit + time, # only time-variant covariates
second_stage = ~ i(d_it, ref = 0),
treatment = "d_it",
cluster_var = "unit"
)
fixest::etable(twsdid)
twsdid
# Event Study
twsdid_k <- did2s::did2s(
stream,
yname = "minutes_watched",
first_stage = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched | unit + time, # only time-variant covariates
second_stage = ~ i(d_it_k, ref = c(-1, Inf)),
treatment = "d_it",
cluster_var = "unit"
)
fixest::etable(twsdid_k)
fixest::iplot(twsdid_k)
# Comparison plot
fixest::iplot(list(twsdid_k, evt_stdy_w, sunab))
did::ggdid(drdid_evt_sty)
tibble(
"TWFE" = twfe_w$coeftable$Estimate[1],
"Sun-Abraham" = summary(sunab, agg = "ATT")$coeftable[[1]],
"Callaway & Sant’Anna" = did::aggte(drdid, type="simple")[[1]],
"Gardner, Thakral, Tô, and Yap" = twsdid$coeftable[[1]]
)
readRDS("/Users/oli/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_10/stream.rds")
readRDS("/Users/oli/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_10/stream.rds") |> select(-covariate1)
readRDS("/Users/oli/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_10/stream.rds") |> select(-covariate1, -covariate2)
readRDS("/Users/oli/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_10/stream.rds") |> select(-covariate1, -covariate2) |> saveRDS("/Users/oli/my_drive/02_TUHH/03_github/causal_ds_ss24/content/course_weeks/week_10/stream.rds")
c("z1" = 3, "z2" = 5, "z3" = 7, "z4", "s1" = 12, "s2" = 11, "ö1" = 8, "ö2" = 4)
c("z1" = 2, "z2" = 5, "z3" = 7, "z4" = 8, "s1" = 12, "s2" = 11, "ö1" = 8, "ö2" = 1)
c("z1" = 3, "z2" = 5, "z3" = 7, "z4" = 8, "s1" = 12, "s2" = 11, "ö1" = 8, "ö2" = 4)
c("ö1" = 8, "z4" = 7, "s2" = 6, "z3" = 5, "z2" = 4, "s1" = 3, "z1" = 2, "v2" = 1)
res<-c("z1" = 3, "z2" = 5, "z3" = 7, "z4" = 8, "s1" = 12, "s2" = 11, "ö1" = 8, "ö2" = 4)
self<-c("ö1" = 8, "z4" = 7, "s2" = 6, "z3" = 5, "z2" = 4, "s1" = 3, "z1" = 2, "v2" = 1)
res[names(self)]
self<-c("ö1" = 8, "z4" = 7, "s2" = 6, "z3" = 5, "z2" = 4, "s1" = 3, "z1" = 2, "ö2" = 1)
res[names(self)]
c(res, res[names(self)])
cor(c(res, res[names(self)]))
cor(res, res[names(self)])
plot(res, res[names(self)])
ggplot(res, res[names(self)]) |> stat_smooth()
tibble(ergebnis = res, selbst =  res[names(self)])
tibble(ergebnis = res, selbst =  res[names(self)]) |> ggplot(aes(x = selbst, y = ergebnis)) + geom_point()
tibble(ergebnis = res, selbst =  res[names(self)]) |> ggplot(aes(x = selbst, y = ergebnis)) + geom_point() + geom_smooth()
tibble(ergebnis = res, selbst =  res[names(self)]) |> ggplot(aes(x = selbst, y = ergebnis)) + geom_point() + stat_smooth()
?stat_smooth
tibble(ergebnis = res, selbst =  res[names(self)]) |> ggplot(aes(x = selbst, y = ergebnis)) + geom_point() + geom_smooth(method="lm")
summary(evt_stdy_wo)
betahat <- summary(evt_stdy_wo)$coefficients #save the coefficients
sigma <- summary(evt_stdy_wo)$cov.scaled #save the covariance matrix
delta_rm_results <-
HonestDiD::createSensitivityResults_relativeMagnitudes(
betahat = betahat, #coefficients
sigma = sigma, #covariance matrix
numPrePeriods = 9, #num. of pre-treatment coefs
numPostPeriods = 13, #num. of post-treatment coefs
Mbarvec = seq(0.5,2, by = 0.5) #values of Mbar
)
delta_rm_results <-
HonestDiD::createSensitivityResults_relativeMagnitudes(
betahat = betahat, #coefficients
sigma = sigma, #covariance matrix
numPrePeriods = 9, #num. of pre-treatment coefs
numPostPeriods = 7, #num. of post-treatment coefs
Mbarvec = seq(0.5,2, by = 0.5) #values of Mbar
)
res
res<-c("z1" = 1, "z2" = 2, "z3" = 4, "z4" = 6, "s1" = 8, "s2" = 7, "ö1" = 6, "ö2" = 3)
cor(res, res[names(self)])
res
self
tibble(ergebnis = res, selbst =  res[names(self)]) |> ggplot(aes(x = selbst, y = ergebnis)) + geom_point() + geom_smooth(method="lm")
df_bacon
ggplot(df_bacon$two_by_twos) +
aes(x = weight, y = estimate, shape = factor(type)) +
geom_point() +
geom_hline(yintercept = 0) +
theme_minimal() +
labs(x = "Weight", y = "Estimate", shape = "Type")
betahat <- summary(evt_stdy_wo)$coefficients #save the coefficients
sigma <- summary(evt_stdy_wo)$cov.scaled #save the covariance matrix
delta_rm_results <-
HonestDiD::createSensitivityResults_relativeMagnitudes(
betahat = betahat, #coefficients
sigma = sigma, #covariance matrix
numPrePeriods = 9, #num. of pre-treatment coefs
numPostPeriods = 7, #num. of post-treatment coefs
Mbarvec = seq(0.5,2, by = 0.5) #values of Mbar
)
# HonestDiD
#' @title honest_did
#'
#' @description a function to compute a sensitivity analysis
#'  using the approach of Rambachan and Roth (2021)
honest_did <- function(...) UseMethod("honest_did")
#' @param e event time to compute the sensitivity analysis for.
#'  The default value is `e=0` corresponding to the "on impact"
#'  effect of participating in the treatment.
#' @param type Options are "smoothness" (which conducts a
#'  sensitivity analysis allowing for violations of linear trends
#'  in pre-treatment periods) or "relative_magnitude" (which
#'  conducts a sensitivity analysis based on the relative magnitudes
#'  of deviations from parallel trends in pre-treatment periods).
#' @inheritParams HonestDiD::createSensitivityResults
#' @inheritParams HonestDid::createSensitivityResults_relativeMagnitudes
honest_did.AGGTEobj <- function(es,
e          = 0,
type       = c("smoothness", "relative_magnitude"),
gridPoints = 100,
...) {
type <- match.arg(type)
# Make sure that user is passing in an event study
if (es$type != "dynamic") {
stop("need to pass in an event study")
}
# Check if used universal base period and warn otherwise
if (es$DIDparams$base_period != "universal") {
stop("Use a universal base period for honest_did")
}
# Recover influence function for event study estimates
es_inf_func <- es$inf.function$dynamic.inf.func.e
# Recover variance-covariance matrix
n <- nrow(es_inf_func)
V <- t(es_inf_func) %*% es_inf_func / n / n
# Remove the coefficient normalized to zero
referencePeriodIndex <- which(es$egt == -1)
V    <- V[-referencePeriodIndex,-referencePeriodIndex]
beta <- es$att.egt[-referencePeriodIndex]
nperiods <- nrow(V)
npre     <- sum(1*(es$egt < -1))
npost    <- nperiods - npre
baseVec1 <- basisVector(index=(e+1),size=npost)
orig_ci  <- constructOriginalCS(betahat        = beta,
sigma          = V,
numPrePeriods  = npre,
numPostPeriods = npost,
l_vec          = baseVec1)
if (type=="relative_magnitude") {
robust_ci <- createSensitivityResults_relativeMagnitudes(betahat        = beta,
sigma          = V,
numPrePeriods  = npre,
numPostPeriods = npost,
l_vec          = baseVec1,
gridPoints     = gridPoints,
...)
} else if (type == "smoothness") {
robust_ci <- createSensitivityResults(betahat        = beta,
sigma          = V,
numPrePeriods  = npre,
numPostPeriods = npost,
l_vec          = baseVec1,
...)
}
return(list(robust_ci=robust_ci, orig_ci=orig_ci, type=type))
}
drdid_evt_stdy <- did::aggte(drdid, type="dynamic")
did::ggdid(drdid_evt_stdy)
honest_did(es = CS_es_never_cond,
e = 0,
type="relative_magnitude")
honest_did(es = drdid_evt_stdy,
e = 0,
type="relative_magnitude")
drdid_evt_stdy
honest_did(es = drdid_evt_stdy, e = 0, type="relative_magnitude")
drdid <- did::att_gt(
yname = "minutes_watched",
tname = "time",
idname = "unit",
gname = "group",
xformla = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched,# + unit, #  ~ 1
data = stream,
allow_unbalanced_panel = TRUE,
control_group = "nevertreated", # "notyettreated"
anticipation = 0,
clustervars = "unit",
base_period = "universal",
est_method = "dr", # "reg", "ipw"
)
did::aggte(drdid, type="simple")
did::aggte(drdid, type="group")
drdid_evt_stdy <- did::aggte(drdid, type="dynamic")
honest_did(es = drdid_evt_stdy, e = 0, type="relative_magnitude")
library(HonestDiD)
honest_did(es = drdid_evt_stdy, e = 0, type="relative_magnitude")
hd_did <- honest_did(es = drdid_evt_stdy, e = 0, type="relative_magnitude")
hd_did_relmag
hd_did_relmag <- createSensitivityPlot_relativeMagnitudes(
hd_did$robust_ci,
hd_did$orig_ci)
hd_did_relmag
#
library(pretrends)
did2s::did2s(
stream,
yname = "minutes_watched",
first_stage = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched | unit + time, # only time-variant covariates
second_stage = ~ i(d_it_k, ref = c(-1, Inf)),
treatment = "d_it",
cluster_var = "unit"
)
did2s::did2s(
stream,
yname = "minutes_watched",
first_stage = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched | unit + time, # only time-variant covariates
second_stage = ~ i(d_it_k, ref = c(-2, Inf)),
treatment = "d_it",
cluster_var = "unit"
)
did2s::did2s(
stream,
yname = "minutes_watched",
first_stage = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched | unit + time, # only time-variant covariates
second_stage = ~ i(d_it_k, ref = -2),
treatment = "d_it",
cluster_var = "unit"
)
did2s::did2s(
stream,
yname = "minutes_watched",
first_stage = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched | unit + time, # only time-variant covariates
second_stage = ~ i(d_it_k, ref = -1),
treatment = "d_it",
cluster_var = "unit"
)
did2s::did2s(
stream,
yname = "minutes_watched",
first_stage = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched | unit + time, # only time-variant covariates
second_stage = ~ i(d_it_k, ref = c(-2, Inf)),
treatment = "d_it",
cluster_var = "unit"
)
did2s::did2s(
stream,
yname = "minutes_watched",
first_stage = ~ age + gender + account_tenure + num_drama_watched + num_comedy_watched + num_action_watched | unit + time, # only time-variant covariates
second_stage = ~ i(d_it_k, ref = c(-1, Inf)),
treatment = "d_it",
cluster_var = "unit"
)
stream
stream |>
select(d_it)
